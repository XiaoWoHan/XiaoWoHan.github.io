<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>若韩陈梦</title>
  
  
  <link href="https://hanblog.xyz/atom.xml" rel="self"/>
  
  <link href="https://hanblog.xyz/"/>
  <updated>2021-03-16T02:02:51.000Z</updated>
  <id>https://hanblog.xyz/</id>
  
  <author>
    <name>Han</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>硬件开发笔记</title>
    <link href="https://hanblog.xyz/posts/d655f8c7.html"/>
    <id>https://hanblog.xyz/posts/d655f8c7.html</id>
    <published>2021-03-16T02:02:51.000Z</published>
    <updated>2021-03-16T02:02:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.imgdb.cn/item/6054075d524f85ce29e3921c.jpg" alt="硬件设备"></p><blockquote><p>为记录以及复盘项目中使用的技术记录，本篇文章将以无人售货机设备举例。</p></blockquote><hr><h3 id="一、万物互联"><a href="#一、万物互联" class="headerlink" title="一、万物互联"></a>一、万物互联</h3><p>物联网是万物互联的网络。 更简单的说就是：利用无线网络技术，人们可以与物体“对话”，物体和物体也可以“交流”。</p><h3 id="二、-技术支持"><a href="#二、-技术支持" class="headerlink" title="二、 技术支持"></a>二、 技术支持</h3><h4 id="数据通讯"><a href="#数据通讯" class="headerlink" title="数据通讯"></a>数据通讯</h4><p>如何保证通讯的<strong>稳定性</strong>，数据<strong>一致性</strong>，如何进行<strong>双向数据通信</strong>。</p><p>开发中遇到的首要问题就是如何进行设备与服务器的数据通信，当用户下载或使用小程序时，怎么才能及时发送指令让设备做出相应的动作。</p><blockquote><p>比如：售货机中，用户扫码后，怎么能够让设备做出打开舱门的动作。支付后如何关闭舱门以及数据计算。</p></blockquote><p>日常生活中可用到的方法包含：</p><blockquote><p>蓝牙控制，消息推送</p></blockquote><p>1、蓝牙控制在共享单车等场景中非常常见，属于是一种无线数据和语音通信开放的全球规范，它是基于低成本的近距离无线连接，为固定和移动设备建立通信环境的一种特殊的近距离无线技术连接。</p><p>但即使低成本也是需要成本的，需要采购对应数量的蓝牙模块，如果一个设备只使用一个蓝牙模块还可能会造成多个舱门同时操作时并发的数据错乱问题。</p><p>2、消息推送能够确保消息的实时性，稳定性，符合需求。技术选用Socket通信，可保证可双向通信。当然会有断网<code>ip切换</code>问题</p><p><img src="https://img.imgdb.cn/item/605461f9524f85ce29195cbb.jpg" alt="Socket"></p><p>功能1：心跳检测</p><p>心跳检测，就是判断对方是否还存活，一般采用定时的发送一些简单的包，如果在指定的时间段内没有收到对方的回应，则判断对方已经挂掉</p><p><img src="https://img.imgdb.cn/item/605462f1524f85ce2919edb7.jpg" alt="心跳检测"></p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 开始心跳</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">StartHeartbeat</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// HeartbeatThread:心跳检测线程</span></span><br><span class="line">    <span class="comment">// this.ClientOption.HeartRate=5*60:心跳频率</span></span><br><span class="line">    <span class="keyword">if</span> (HeartbeatThread == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        HeartbeatThread = <span class="keyword">new</span> Thread(() =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//循环检测</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//当前时间戳</span></span><br><span class="line">                    <span class="keyword">var</span> dateTimeString = GetTimeStamp(DateTime.Now).ToString();</span><br><span class="line">                    <span class="comment">//发送当前时间戳作为在线状态</span></span><br><span class="line">                    Writer.Write(dateTimeString);</span><br><span class="line">                    <span class="comment">//发送成功后休息5分钟</span></span><br><span class="line">                    Thread.Sleep(<span class="keyword">this</span>.ClientOption.HeartRate * <span class="number">1000</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                catch (IOException)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//发送失败则意味着网络连接断开，将重新连接</span></span><br><span class="line">                    ReConnect();</span><br><span class="line">                    <span class="comment">//停止本次连接的心跳线程</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        HeartbeatThread.Name = <span class="string">&quot;Socket心跳线程&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//开始心跳</span></span><br><span class="line">    HeartbeatThread.Start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>功能2：通讯加密</p><p>为了防止数据抓包恶意攻击，必须每个与服务器通讯的包都需要使用加密</p><p>性能优化：</p><p>可参考文章：<a href="https://juejin.cn/post/6861560765200105486">https://juejin.cn/post/6861560765200105486</a></p><h4 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h4><p>售货机作为一个面向社区选型的项目，数据当然是重中之重。每个社区的喜好，购买力，再准确到用户画像等都要通过数据分析来产生。</p><p>作为售货机端因为有很多不稳定因素，所以要保证数据存储持久性，还要保证数据安全以及环境配置不能太过繁琐，以免给运维和实施带来不必要的麻烦。</p><p>所以选用了EF+SqlLite数据库</p><ul><li>不需要一个单独的服务器进程或操作的系统（无服务器的）。</li><li>SQLite 不需要配置，这意味着不需要安装或管理。</li><li>一个完整的 SQLite 数据库是存储在一个单一的跨平台的磁盘文件。</li><li>SQLite 是非常小的，是轻量级的，完全配置时小于 400KiB，省略可选功能配置时小于250KiB。</li><li>SQLite 是自给自足的，这意味着不需要任何外部的依赖。</li><li>SQLite 事务是完全兼容 ACID 的，允许从多个进程或线程安全访问。</li><li>SQLite 支持 SQL92（SQL2）标准的大多数查询语言的功能。</li><li>SQLite 使用 ANSI-C 编写的，并提供了简单和易于使用的 API。</li><li>SQLite 可在 UNIX（Linux, Mac OS-X, Android, iOS）和 Windows（Win32, WinCE, WinRT）中运行。</li></ul><h3 id="如何操作硬件"><a href="#如何操作硬件" class="headerlink" title="如何操作硬件"></a>如何操作硬件</h3><p>一般情况下，设备之间的通信方式可以分成<strong>并行通信和串行通信</strong>两种。它们的区别是：</p><table><thead><tr><th></th><th>并行通信</th><th>串行通信</th></tr></thead><tbody><tr><td>传输原理</td><td>数据各个位同时传输</td><td>数据按位顺序传输</td></tr><tr><td>优点</td><td>速度快</td><td>占用引脚资源少</td></tr><tr><td>缺点</td><td>占用引脚资源多</td><td>速度相对较慢</td></tr></tbody></table><p>在项目中使用的是串行通信来匹配对应的设备</p><p>定义：<a href="https://hanblog.xyz/2019/12/26/%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/">https://hanblog.xyz/2019/12/26/%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/</a></p><p>C#如何操作：<a href="https://hanblog.xyz/2019/11/12/Serial-Communication-Note/">https://hanblog.xyz/2019/11/12/Serial-Communication-Note/</a></p><p><img src="https://img.imgdb.cn/item/60547183524f85ce2922a0f1.jpg" alt="举个例子"></p><p>一条操作命令包含</p><blockquote><p>1，在信号线上共有两种状态，分别是逻辑1（高电平）和逻辑0（低电平）来区分。</p><p>2，起始位（Start Bit）：发送器是通过发送起始位而开始一个字符的传送，使数据线处于逻辑0状态，提示接受器数据传输即将开始。</p><p>3，数据位（Data Bits）：数据位一般为8位一个字节的数据（也有6位、7位的情况），低位（LSB）在前，高位（MSB）在后。</p><p>4，校验位（parity Bit）：可以认为是一个特殊的数据位。校验位一般用来判断接收的数据位有无错误，一般是奇偶校验。在使用中，该位常常取消。</p><p>5，停止位：停止位在最后，用以标志一个字符传送的结束，它对应于逻辑1状态。</p><p>6，位时间：即时间宽度。起始位、数据位、校验位的位宽度是一致的，停止位有0.5位、1位、1.5位格式，一般为1位。</p><p>7，帧：从起始位开始到停止位结束的时间间隔称之为一帧。</p><p>8，波特率：如波特率9600=9600bps（位/秒）。UART的传送速率，用于说明数据传送的快慢。在串行通信中，数据是按位进行传送的，因此传送速率用每秒钟传送数据位的数目来表示，称之为波特率。</p></blockquote><p>这些都是通过硬件厂商提供的对接文档一一对应即可</p><p><img src="https://img.imgdb.cn/item/605474b9524f85ce29246275.jpg" alt="串口调试助手"></p><p>比如我们操作电控锁，实现一个开锁功能：</p><p><img src="https://img.imgdb.cn/item/60547549524f85ce2924b701.jpg" alt="电控锁"></p><p>我们先打开对应的串口，将参数对应</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.IO.Ports;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> port = <span class="keyword">new</span> SerialPort(<span class="string">&quot;COM1&quot;</span>)<span class="comment">//端口号</span></span><br><span class="line">    &#123;</span><br><span class="line">        BaudRate=<span class="number">9600</span>,<span class="comment">//波特率</span></span><br><span class="line">        Parity=Parity.None,<span class="comment">//校验位(流控)</span></span><br><span class="line">        DataBits =<span class="number">8</span>,<span class="comment">//数据位</span></span><br><span class="line">        StopBits =<span class="number">1</span>,<span class="comment">//停止位</span></span><br><span class="line">    &#125;</span><br><span class="line">    port.Open();<span class="comment">//打开一个新的串口连接。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文档中描述开锁命令为：</p><p><img src="https://img.imgdb.cn/item/60547752524f85ce2925eb85.jpg" alt="开锁命令"></p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> data = <span class="keyword">new</span> <span class="built_in">byte</span>[]</span><br><span class="line">&#123;</span><br><span class="line">    <span class="number">0x8A</span>,</span><br><span class="line">    <span class="number">0x01</span>,</span><br><span class="line">    <span class="number">0x01</span>,</span><br><span class="line">    <span class="number">0x11</span>,</span><br><span class="line">    <span class="number">0x9B</span></span><br><span class="line">&#125;;</span><br><span class="line">port.Write(data, <span class="number">0</span>, data.Length);</span><br><span class="line">port.Close();</span><br></pre></td></tr></table></figure><p>这样即可实现开锁功能。</p><p>当然命令有时候是动态的，所以最后的校验需要以对应的规则去计算。</p><p>遇到的问题：</p><blockquote><p>1.串口在开启后如果再次开启会抛出异常，为了防止串口开起后未释放资源，建议操作后将串口关闭。</p><p>2.传输的数据一般为16进制，如遇到自定义信息的传输，需要先转换为16进制后进行传输</p><p>3.在多个设备同时操作时，如果是半双工则可能遇到数据错乱问题。比如两个设备的命令被混合在一起发送或响应，建议做好响应校验和并发处理</p></blockquote>]]></content>
    
    
    <summary type="html">硬件开发过程技术选用笔记</summary>
    
    
    
    
    <category term="iot" scheme="https://hanblog.xyz/tags/iot/"/>
    
    <category term="硬件" scheme="https://hanblog.xyz/tags/%E7%A1%AC%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>考59分比考零分更难过，最痛苦的不是不曾拥有，而是差一点就可以。</title>
    <link href="https://hanblog.xyz/posts/883b6f55.html"/>
    <id>https://hanblog.xyz/posts/883b6f55.html</id>
    <published>2021-01-09T00:59:57.000Z</published>
    <updated>2021-01-09T00:59:57.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>01</strong></p><p>有个卖婚纱的人说，卖了这么多年的婚纱，从未见过有哪个男孩，在帘子拉开时会发出「哇」的惊叹。</p><p>后来过了这么多年才明白，<strong>大概是他们都没能留住年少时的爱人吧。</strong></p><p>试婚纱的姑娘，或许也曾在试衣间里流过眼泪，她也没能嫁给17岁时年少的喜欢。</p><p align="right">——《你的姑娘》热评</p><p><strong>02</strong></p><p>很多人在感情里为对方开脱的时候，总是喜欢用个性来解释一切。或许他内向，或许他傲娇，或许他含蓄，或许他只是工作忙，没有想起你。</p><p>可是你千万别忘了，所有人的共性都是，<strong>喜欢就愿付出，牵挂就必联系，你若感受不到他对你的爱，那么就是不爱。</strong></p><p align="right">——《我不要被你记住》热评</p><p><strong>03</strong></p><p>女生最后会选择嫁给一个愿意陪她的人，而男生则会把对前任的亏欠补在另外一个女人身上。</p><p><strong>人生的出场顺序很重要，陪你酩酊大醉的人注定不能陪你回家。</strong></p><p align="right">——《比你更爱我的人》热评</p><p><img src="https://img.imgdb.cn/item/5ff905273ffa7d37b387a8ce.gif" alt="640.gif"></p><p><strong>04</strong></p><p>你生日的那天，我坐火车来到你学校。</p><p>给你发消息：“猜猜我在哪？”</p><p>你问：“你来看我啦？”</p><p>我站在校门口，看见你牵着一个男生的手。</p><p>我说：<strong>“猜错啦，我在上课，生日快乐。”</strong></p><p>那天没有回去的车票，我在两块钱一个小时的网吧里待了一晚上，<strong>烟抽得我有点嗓子哑了。</strong></p><p align="right">——《假装》热评</p><p><strong>05</strong></p><p>世界上哪来的那么多一见如故和无话不谈，<strong>不过是因为我喜欢你，所以你说的话题我都感兴趣。</strong></p><p>你叫我听的歌我都觉得有意义，你说的电影我都觉得有深意，你口中的风景我都觉得好美丽，不过是因为我喜欢你。</p><p align="right">—— 《往后余生》热评</p><p><strong>06</strong></p><p>20岁刚出头是男孩最穷的时候，20岁刚出头是女孩子最漂亮的时候，贫穷对我来说只是晚上吃馒头和吃牛排的区别，无损我的快乐。</p><p><strong>可当我爱上一个姑娘的时候，我才深深的感受到了什么是贫穷所带来的自卑。</strong></p><p align="right">—— 《我已经爱上你》热评</p><p><strong>07</strong></p><p>考59分比考零分更难过，<strong>最痛苦的不是不曾拥有，而是差一点就可以。</strong></p><p align="right">—— 《淘汰》热评</p><p><img src="https://img.imgdb.cn/item/5ff905413ffa7d37b387ae30.gif" alt="640.gif"></p><p><strong>08</strong></p><p>小时候跟着父亲去城里卖西瓜，害怕同学会看到我，就拼命地将自己隐藏起来，一路心惊肉跳。</p><p>现在想来，那条路绿树成荫，阳光飒爽，若不是我害怕面对自己的不完美，一定能看到许多美好的景致，<strong>那条路，正如其他的所有路，从来都不应该被逃避。</strong></p><p align="right">——《平凡之路》热评</p><p><strong>09</strong></p><p>小时候我爱哭，我妈就整天说再哭警察就把你带走了。</p><p>然后我就不敢哭了，后来我跟一个警察相恋6年，双方家里就闹了6年，最终他选择回归正常生活，跟一个女的结婚。</p><p>在他结婚的那天，我静静的坐在家里，微笑着回头问我妈：<strong>“你说我如果现在哭，警察还会回来把我带走吗？”</strong></p><p>我妈哭了。</p><p align="right">——《夏至未至》热评</p><p><strong>10</strong></p><p>城市在灯光里睡得安详，而思绪在一首歌里张望。</p><p>当我们在深夜时被人生缺乏意义感的虚无吞没的时候，<strong>一点温暖就能慰藉，一丝希望就能救赎。</strong></p><p align="right">——《深夜一角》热评</p>]]></content>
    
    
    <summary type="html">网易云有哪些热评，一瞬间就击中了你？</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>黑猫与白猫</title>
    <link href="https://hanblog.xyz/posts/eb00c87e.html"/>
    <id>https://hanblog.xyz/posts/eb00c87e.html</id>
    <published>2020-08-01T10:22:51.000Z</published>
    <updated>2020-08-01T10:22:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>一个雨夜，黑猫对白猫说；</p><p>“如果有人从这里经过，你就冲他们叫，运气好的话就会有人收养你。”</p><p>白猫回头看看黑猫；</p><p>“你不和我一起走么？”</p><p>黑猫笑了笑；</p><p>“我太丑了，颜色也不好看，还少了一只耳朵，没人会要我的。”</p><p>黑猫说完放下了嘴里的食物，一转身跑开了。</p><p>第二天清晨，黑猫回来了，地上多了一堆被吃剩下的猫粮还有一小杯清澈的水，不过白猫已经不在了。</p><p>黑猫失落的在四周寻觅了好久，它确定白猫真的不在之后，吃起了地上的猫粮。</p><p>正当它狼吞虎咽的时候白猫从一棵树后窜了出来。</p><p>“有没有想我？”白猫调皮的拍了它一下。</p><p>“你去哪里了？为什么还没有走？”</p><p>“你那么想让我走啊？”</p><p>黑猫本想说是，可话到嘴边又咽了回去。</p><p>“懒得理你，明天你要是再不走，肚子饿了我可不管。”</p><p>黑猫说罢又一次跑开了。</p><p><strong>回忆是一次美好的时光，可想起它的却是身上的疤痕。</strong></p><p>暮色慢慢的降临，阳光浅浅的升起，一切仿佛和昨天一样，散落在地上的猫粮，还有一杯清澈而熟悉的水。</p><p>黑猫环顾了一下四周，在没有发现白猫之后，它用鼻尖轻轻的点了点那杯水，然后拼命的喝了起来。</p><p>“有没有想我！？”白猫不知道从哪里又窜了出来。</p><p>“你怎么还没走？”黑猫被吓了一跳。</p><p>“我怕你看不见我会孤单。”白猫嘻嘻的笑着。</p><p>“我才没有孤单呢，我很好，你要是走了，我会更好的。”</p><p>“我走了，你真的会更好么？”白猫收起了笑容。</p><p>“是的，我会祝你幸福的。”黑猫气愤的说道。</p><p>白猫不敢相信黑猫能说出这样的话，它伤心极了；</p><p>“我知道你是怕我被欺负，怕我挨饿才这样说的，可你不能婉转一点么？非要把话说的这么绝？”</p><p>面对白猫的质问黑猫低着头一句话也没有说，只是无奈的转过了身又一次消失在了夜幕下。</p><p>天空总是灰蒙蒙的，一个雨季连着一个雨季<strong>，有时候分不清那个是月亮，那个是泪花。</strong></p><p>**<br>**</p><p>白猫这次真的走了，虽然地上还留有许多的过往，可黑猫知道，这次它真的走了。</p><p>其实黑猫很想说一句我很想你，可它知道这么做白猫是不会幸福的。</p><p>伤感之时黑猫总是在安慰自己；</p><p>“它现在过的很幸福，不用每天挨饿，不用每天躲藏，也许还会有一个更好的黑猫陪着她，只要那个黑猫不会像我这样少一只耳朵就好。”</p><p>寒冷的时候它回来过，炎热的时候它也回来过，每次回来它都会在四下寻觅好久，它并不期望能看见白猫，它也许只是想找回从前那个自己。</p><p><strong>最难忘的爱不是陪你到老，而是祝你幸福，最难忘的痛不是你只留下的伤，而是你只留下了我。</strong></p><p><img src="https://pic.downk.cc/item/5f28b28914195aa5942e937d.jpg" alt="我想你了"></p><p>被收养的白猫过的很不幸，因为这个家里有一只硕大的成年黑猫。</p><p>它每天欺负白猫，并把它当成了一种泄欲工具。</p><p>白猫有时会反抗，有时只好顺从，虽然每天过着衣食无忧的生活，可它却被弄的遍体鳞伤。</p><p>在无尽的折磨下白猫变得很暴躁，见到谁都会乱咬。</p><p>人们为了让白猫变得温和一点决定带它去做绝育。</p><p>在去往医院的路上，他们经过了那个充满回忆的地方。</p><p><strong>一棵棵熟悉的松树，一段段过往的台阶</strong>。</p><p>正当它四下张望的时候一只熟悉的身影出现在了眼前。</p><p>一只少了一个耳朵的黑猫正在翻倒的垃圾箱里匆忙的寻找着。</p><p>一会抬头看看，一会又低下头忙活，好像在警觉着什么。</p><p>白猫看到这里顿时紧张了起来，它拼命的在箱子里呼喊着，可它的声音太小了，黑猫根本没有听见。</p><p>随着距离越来越远，白猫开始疯狂撕咬着箱子，人们以为它哪里不舒服就停了下来。</p><p>当箱子被打开的那一刻，白猫一下子窜了出去，欣喜若狂的跑向了黑猫。</p><p>就在它马上要碰到黑猫的时候，在垃圾箱的后面跑出来了另一只黑猫。</p><p>两只黑猫瞬间厮打在了一起，一边嚎叫一边翻滚。</p><p>争执了一会之后，一只耳朵的黑猫败下了阵来，它慌张的逃窜着，可另一只却还是不依不饶。</p><p>它们绕过了松树，越过了台阶，最后跑到了马路上。</p><p>白猫也在后面不停的追赶着，可当它赶到的时候，却发现黑猫已经倒在了血泊之中。</p><p>它颤抖着俯下了身，不敢相信眼前所发生的一切。</p><p>家人们在马路边大声呼喊它的名字，白猫知道她们想让自己回去。</p><p>可白猫这时已经不想回到那个所谓的家了，它流着眼泪望着黑猫渐渐柔弱的瞳孔，轻轻的说了一句；</p><p>“<strong>你有没有想过我</strong>？”</p><p>红灯眨了眨眼变成了黄灯，黄灯又眨了眨眼，转变成了一个绿灯。</p><p>人们把这两只小猫埋在了当初他们相识的地方</p><p>那里还剩下一片不知是谁撒下的猫粮，还有一堆快要变质的各种吃食，仿佛像从垃圾箱里捡回来的一样。</p><hr><p>作者：413929<br>链接：<a href="https://www.jianshu.com/p/e73068f5df01">https://www.jianshu.com/p/e73068f5df01</a><br>来源：简书</p>]]></content>
    
    
    <summary type="html">错误的选择是悲剧的开始，一个连自己内心到底想要什么都不清楚的白猫，是不成熟的表现，而残耳的黑猫没勇气担当自己的责任，故做大度，看似真爱，其实逃避和不敢面对两人的情感，把爱情推向悲哀的泥淖。</summary>
    
    
    
    
    <category term="分享" scheme="https://hanblog.xyz/tags/%E5%88%86%E4%BA%AB/"/>
    
    <category term="文章" scheme="https://hanblog.xyz/tags/%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>C#多线程通信：信号量</title>
    <link href="https://hanblog.xyz/posts/d3a9d5ec.html"/>
    <id>https://hanblog.xyz/posts/d3a9d5ec.html</id>
    <published>2020-01-07T09:00:43.000Z</published>
    <updated>2020-01-07T09:00:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>在做多线程操作时，难免会遇到一个线程需要等待另外一个线程操作完成后再继续执行的情况</p><p>这就涉及到线程与线程之前的通讯问题，难搞喔。。</p><h4 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h4><p>前段时间在逛论坛的时候无意间发现了一个名词：<code>信号量(Semaphore)</code></p><blockquote><p>#百度百科</p><p>信号量(Semaphore)，有时被称为信号灯，是在多线程环境下使用的一种设施，是可以用来保证两个或多个关键代码段不被<a href="https://baike.baidu.com/item/%E5%B9%B6%E5%8F%91/11024806">并发</a>调用。在进入一个关键代码段之前，线程必须获取一个信号量；一旦该关键代码段完成了，那么该线程必须释放信号量。其它想进入该关键代码段的线程必须等待直到第一个线程释放信号量。为了完成这个过程，需要创建一个信号量VI，然后将Acquire Semaphore VI以及Release Semaphore VI分别放置在每个关键代码段的首末端。确认这些信号量VI引用的是初始创建的信号量。</p></blockquote><h4 id="C-信号量"><a href="#C-信号量" class="headerlink" title="C#信号量"></a>C#信号量</h4><p>在C#中，封装了有ManualResetEvent，AutoResetEvent等帮助类帮助我们很好的处理上面提到的问题。</p><p>线程可以通过调用帮助类对象的WaitOne()方法进入等待状态，然后另外一个线程通过调用AutoResetEvent对象的Set()方法取消等待的状态。</p><p><em>AutoResetEvent</em>：</p><p>表示一个线程同步事件，该事件在发出信号时会在释放单个等待线程后自动重置。这个类不能被继承。</p><p>使用AutoResetEvent实例等待完成后，会重置阻塞状态，也就是Set后只能等待通过一次</p><p><em>ManualResetEvent</em>：</p><p>AutoResetEvent.WaitOne()会自动改变事件对象的状态，即AutoResetEvent.WaitOne()每执行一次，事件的状态就改变一次，也就是从无信号变为有信号，或从有信号变为无信号。而ManualResetEvent则是调用Set()方法后其信号量不会自动改变，除非再设置Reset()方法。</p><h4 id="AutoResetEvent如何工作的"><a href="#AutoResetEvent如何工作的" class="headerlink" title="AutoResetEvent如何工作的"></a>AutoResetEvent如何工作的</h4><p>   在内存中保持着一个bool值，如果bool值为False，则使线程阻塞，反之，如果bool值为True,则使线程退出阻塞。当我们创建AutoResetEvent对象的实例时，我们在函数构造中传递默认的bool值。</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">AutoResetEvent autoResetEvent = <span class="keyword">new</span> AutoResetEvent(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h5 id="WaitOne-方法"><a href="#WaitOne-方法" class="headerlink" title="WaitOne 方法"></a>WaitOne 方法</h5><p>该方法阻止当前线程继续执行，并使线程进入等待状态以获取其他线程发送的信号。WaitOne将当前线程置于一个休眠的线程状态。WaitOne方法收到Set信号后将返回True，否则将返回False。</p><p>WaiteOne方法的第一个重载版本是必须等到Set信号才会继续执行，否则将会一直等待下去。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">autoResetEvent.WaitOne();</span><br></pre></td></tr></table></figure><p>WaitOne方法的第二个重载版本是等待指定的秒数。如果在指定的秒数后，没有收到任何信号，方法返回false后,代码将继续执行。</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">autoResetEvent.WaitOne(TimeSpan.FromSeconds(<span class="number">2</span>));</span><br></pre></td></tr></table></figure><h5 id="Set-方法"><a href="#Set-方法" class="headerlink" title="Set 方法"></a>Set 方法</h5><p>AutoResetEvent Set方法发送信号到等待线程以继续其工作，以下是调用该方法的格式。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">autoResetEvent.Set();</span><br></pre></td></tr></table></figure><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">AutoResetEvent settlementEvent = <span class="keyword">new</span> AutoResetEvent(<span class="literal">false</span>);</span><br><span class="line"><span class="comment">//主动结算线程</span></span><br><span class="line"><span class="keyword">var</span> initiative = <span class="keyword">new</span> Thread(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">Thread.Sleep(<span class="number">30</span>);</span><br><span class="line">LogHelper.WriteInfo(<span class="string">&quot;主动结算线程完成&quot;</span>);</span><br><span class="line">settlementEvent.Set();</span><br><span class="line">&#125;)</span><br><span class="line">&#123;</span><br><span class="line">Name = <span class="string">$&quot;<span class="subst">&#123;cabinet.PortName&#125;</span>订单主动结算进程&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自动结算线程</span></span><br><span class="line"><span class="keyword">var</span> automatic = <span class="keyword">new</span> Thread(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">Thread.Sleep(<span class="number">60</span>);</span><br><span class="line">LogHelper.WriteInfo(<span class="string">&quot;自动结算线程完成&quot;</span>);</span><br><span class="line">settlementEvent.Set();</span><br><span class="line">&#125;)</span><br><span class="line">&#123;</span><br><span class="line">Name = <span class="string">$&quot;<span class="subst">&#123;cabinet.PortName&#125;</span>订单自动结算进程&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line">initiative.Start();</span><br><span class="line">automatic.Start();</span><br><span class="line">settlementEvent.WaitOne();</span><br><span class="line">initiative.Abort();</span><br><span class="line">automatic.Abort();</span><br></pre></td></tr></table></figure><p>本方法创建了一个settlementEvent为订单AutoResetEvent的实例，分别创建了initiative为订单的主动结算进程，automatic为订单的自动结算线程。在线程中使用线程睡眠来模拟用户的操作。当某一个线程操作完成后触发settlementEvent订单信号量。以触发后销毁订单结算的所有线程防止重复结算。</p>]]></content>
    
    
    <summary type="html">C#多线程通信中，线程可能需要等待另外一个线程触发信号才继续执行，C#中多线程常用信号量如何使用</summary>
    
    
    
    
    <category term="编程" scheme="https://hanblog.xyz/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C#" scheme="https://hanblog.xyz/tags/C/"/>
    
    <category term="多线程" scheme="https://hanblog.xyz/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>串口通信</title>
    <link href="https://hanblog.xyz/posts/edc30276.html"/>
    <id>https://hanblog.xyz/posts/edc30276.html</id>
    <published>2019-12-26T12:26:03.000Z</published>
    <updated>2019-12-26T12:26:03.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://yanxuan.nosdn.127.net/b56400be1d55de3e738a8041dbde6f03.png" alt="UTOOLS1577411871573.png"></p><p>这里并不对串口的编程作讲解，主要是从应用的角度去讲一讲。因为更多的时候，都是产品做好了，比如触摸屏需要和控制器，PLC通信。理想的情况下，一般只要一上电，不需要太多的操作和配置，就可以通信上。<br> 在这里罗列了一些问题，待会对这些问题讲一讲，看是否有类似的情况，也许可以一起交流分享。</p><ol><li>电脑使用USB转串口可以和设备通信上，换成屏与设备就通信不上了。</li><li>这A家的屏可以和设备通信，换成B家的屏就通信不上了。</li><li>以前不接地线可以通信，换个设备为什么需要接地线了。</li><li>一个设备是232，另一个设备是422，没有转换设备，怎么办。（232与422互转的简单方法）</li><li>用232通信没问题，用485通信没问题，使用232转485之后就通信不稳定。</li><li>485单独接每个设备都通信正常，多个从站接一块通信就不稳定。</li><li>要想实现两个屏或两个主站通过485访问modbus设备，有什么好的办法。</li><li>针对串口通信的弱点，在使用上应该要注意哪些地方。</li></ol><p>当然有可能实际遇到的还不只是这些问题，可能还有一些意想不到的问题，如果你还遇到过什么奇葩奇怪的问题，也可以留言，一块交流探讨，一定会知无不言，言而无尽。<br> 要回答和解决以上这些问题，还需要先了解一下什么是串口通信，232，485，422等。</p><p><strong>什么是串口通信</strong><br> 常见的串口通信一般是指异步串行通信。<br> 这里就要说一下同步和异步的区别了。<br> 算了，还是先讲一下串行通信的概念。那么，与串行通信相对的是什么呢。<br> 与串行通信相对的是并行通信。数据传输一般都是以字节传输的，一个字节8个位。拿一个并行通信举例来说，也就是会有8根线，每一根线代表一个位。一次传输就可以传一个字节，而串口通信，就是传数据只有一根线传输，一次只能传一个位，要传一个字节就需要传8次。就像小虎队那首歌一样，把你的心，我的心，串一串，再烤一烤。。串口通信就是把数据串在一根线上传输，所以就叫串口吧。</p><p><img src="https://user-gold-cdn.xitu.io/2019/12/27/16f45144dfc55d13?w=427&h=219&f=png&s=40495" alt="UTOOLS1577411956677.png"></p><p>与异步通信相对的就是同步通信了。同步通信一般是指有一个时钟信号进行数据信号同步。同步通信对接收方来说就相对简单一些。因为有时钟信号在，每一个高低电平变化一下，就去取一下数据就行了。通信速率可以由发送方或者说是主站设备进行控制。通信速度也相对比串口通信快很多。但是为什么很多设备，屏和plc，控制器不采用这种方式，都使用串口呢。<br> 那么，在很多设备上，不方便接太多线，比如接8根数据线，也不方便接同步时钟信号（这个后面再说），于是一种异步串行通信就诞生了。<br> 相对来说，异步串口通信，就只需要一根线就可以发送数据了。在对速率要求不高的情况，使用一根线发送数据是带来大大的方便和实用价值的。</p><p>那么问题来了，怎么样才能保证一根线就能发送正常的数据呢。也就说发送方发送的数据，接收方是怎么知道是什么数据呢。<br> 为了能正常发送数据和接收正确的数据，那异步串口通信就需要满足以下几个条件：</p><p><img src="https://user-gold-cdn.xitu.io/2019/12/27/16f451494d9dc489?w=640&h=186&f=png&s=101533" alt="UTOOLS1577411974888.png"></p><p>也就是双方必要约定一种暗号。<br> 也许当时发送这个通信的小组是这样讨论的。</p><p>经理：我要用一根线就能传输数据，你来给我定个标准。<br> 研发：好。<br> 经理：只有一根线，我怎么知道数据什么时候开始呢。<br> 研发：就一根线，默认是高电平，那就有一个起始位吧。当检测到有低电平的时候，就是开始有一个字节的数据发送了,起始位之后，先是字节的最低位,传送一个字节。<br> 经理：可是，就一根线，过来的数据会不会有干扰，容易出错呀。<br> 研发：行呀，那就在字节数据后再加一个校验位。可以作奇校验，偶校验，1校验，0校验，无校验。<br> 经理：嗯 ，很不错。有起始位就应该有停止位，那我们就再加个停止位在后面吧。<br> 研发：。。。。。。。。。<br> 经理：传输一串数据，对方要怎么知道数据的拆分呢，怎么按时间或频率去解读数据位，校验位呢。<br> 研发：这样吧，双方约定一个波特率吧，定义一个每个位占用多长的时间，这样双方按这个波特率就可以处理了。<br> 经理：这个比特率呀。。。<br> 研发：老板，是波特率。<br> 经理：我知道，是比特率嘛。<br> 研发：这个波特率呢，是指1S钟可以传输多个位，也就知道一个位占用多长时间。这样就解决传输的问题了。<br> 经理：那万一传输过程，数据快太，判断失误停不下来怎么办。<br> 研发：那就把停止位可以调节为1个停止位或者2个停止位。这样就可以停下来了。<br> 经理：嗯，听着不错。就这样办吧。</p><p>于是，串口通信就这样出来了。<br> 在串口的通信参数上，就有了波特率，数据位，停止位，校验位这几个参数来确保串口通信的正确性和稳定上。当然，这只是某个方面保证串口通信的正确性和稳定性，不代表设备间通信的正确性和稳定性。</p><p><strong>串口通信主要为分232，485，422 通信三种方式。</strong><br> 这三种有什么区别呢。<br> 232：</p><p><img src="https://user-gold-cdn.xitu.io/2019/12/27/16f4514c92caf3c1?w=579&h=212&f=png&s=104534" alt="UTOOLS1577411988225.png"></p><p> 232 通信主要是由RX,TX,GND三根线组成。<br> RX与TX，TX接RX，GND接GND。这样还是比较好理解吧。因为发送和接收分别是由不同的线处理的，也就是能同时发送数据和接收数据，这就是所谓的全双工。<br> 在这里扩展一下，串口通信还有一个功能叫做全功能串口通信，也叫标准串口。因为在两个设备间进行数据传输，有些设备处理速度比较快，有些数据比较慢。为了保证数据能正常传输，在RX,TX的基础上，还增加了几个控制引脚，本来好端端就R，T，G，三根线，凑着就凑齐了9个引脚，召唤出了DB9这个东西。</p><p><img src="https://upload-images.jianshu.io/upload_images/1931244-e743344ef62c0e77.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/1" alt="img"></p><p>这要怪就怪当时使用电脑的时候，还没有互联网这个概念，但是又想在两台电脑间进行通信。所以才有这样一个东西。<br> 在后来的设备，很多控制器，人机界面，PLC等使用串口通信中，基本上就不使用标准串口，而是就直接使用RX，TX，GND三根线来通信了。<br> 但是这里为什么要提到这个呢。因为只是很多设备这样用，也就是还存在少数设备还保留了标准串口的功能。这就是为什么会遇到明明电脑通信是好的，换成触摸屏通信就不行了。因为很多触摸屏只使用了RX，TX，GND通信，遇到一些还保留标准串口功能的就比较讨厌了。</p><p><strong>485：</strong><br> 485是为了解决232通信距离的问题。原理什么之类的就不多讲了。反正232通信距离就是不长。485主要是以一种差分信号进行传输，只需要两根线，+,-两根线，或者也叫A，B两根线。A，B两根线的差分电平信号就是作为数据信号传输。那么问题来了，那是不是就没有RX和TX的概念了。是的，发送和接收就不能分开了。发送和接收都是靠这两根的来传输，也就是每次只能作发送或者只能作接收，这就是半双工的概念了，这在效率上就比232弱很多了。就像对讲机一样，经常是某个人讲完之后，都要说一个over，确保当前说完了，等待对方回复。</p><p><img src="https://user-gold-cdn.xitu.io/2019/12/27/16f451500bc4e2a0?w=481&h=195&f=png&s=60822" alt="UTOOLS1577412002538.png"></p><p> 485就是这样牺牲了232全双工的效率来达到自己传输距离远的代价。那有没有即保留了232的全双工，又可以像485这样提高传输距离呢，于是，422出来了。</p><p><strong>422：</strong><br> 422呢，有些标注为485-4。而485就标注为485-2。有什么区别呢。就是为了好记呢。485-2就是2根线。485-4就是4根线。</p><p><img src="https://user-gold-cdn.xitu.io/2019/12/27/16f45153e63a4133?w=415&h=195&f=png&s=45802" alt="UTOOLS1577412018337.png"></p><p>422就是把232的RX分成两根线，RX+，RX-，把TX分成TX+,TX-。这样就可以同时发送和同时接收了，还可以像485这样，有较远的传输距离。可是这样一种很有优势的通信方式，为什么用的不多呢。我个人的答案和理解就是：线太多了。特别是像我这样懒得接线的人，超过3根线就头晕的。搞个通信还需要接这么多线，什么TX,RX，正啊负啊。交换来交换去。<br> 因为在很多设备通信中，基本上是属于一问一答式的，因此，232的全双工通信优势其实也并没有发挥出来。就像现在打电话，虽然两个人可以同时说话，但是两个人同时说话，叽叽歪歪的，谁知道说什么呀。特别是一个主站与多个从站通信的时候，485的接线就就方便多了，反正大家就两根线，把+都接一块，把-都接一块。如果是422作一主多从，接线上还要理半天呢，而且通信异常了也不好解决。</p><p><strong>好了，串口通信基本就普及到这里吧。下面就对刚上提到的问题进行讲一讲吧，聊一聊吧。</strong></p><p>1、电脑使用USB转串口可以和设备通信上，换成屏与设备就通信不上了。</p><blockquote><p>1）有可能电脑USB转串口接到设备上，使用的是标准串口功能，也就是除了RX，TX，GDN外，还使用了其它引脚。比如像欧姆龙PLC，三菱PLC，在实际与屏的通信中，就需要接某些引脚短接的情况。<br> 2）电脑与控制器或PLC通信时，是扫描波特率参数，自适应的，屏通信可能参数没有设备好。在三菱，基恩士等PLC，就存在变化波特率进行通信交互的过程。<br> 3）也有可能是接线方式不对。因为有些DB9，还需要公头，母头。如果不注意的话，也会存在把TX接到TX上，把RX接到RX上，这样需要注意的地方。<br> 4） 在这里补充一下，有时候可能会使用一些串口助手发送测试数据与控制器通信，有些串口助手的奇偶校验是不起作用，这个要提醒一下。</p></blockquote><p>2、这A家的屏可以和设备通信，换成B家的屏就通信不上了。</p><blockquote><p> 1） 首先确认一下接线是否正确了，RX和TX是否兼容。<br> 2） 地线是否没有接。<br> 3） 除了RX，TX，GND，是否还有其它引脚需要短接的。<br> 4） 通信协议是否一致或不完善，波特率是否一样。</p></blockquote><p>3、以前不接地线可以通信，换个设备为什么需要接地线了。</p><blockquote><p>1）这个问题和上一个有类似的。因为有些设备使用了隔离电源。以前不接地可以通信，有可能是地线已经在另外一个环路已经共地了，实际地线已经接了，所以才可以通信。可能换了个带隔离电源的，两个设备的地是隔离的，就需要在串口上把地线接起来。这个我是自身经历过的，有个客户老说他的设备通信不上，后来拍个照我给我，他地线没有接，他说以前不接地线可以通信的。于是我就给他科普了一下。</p></blockquote><p>4、一个设备是232，另一个设备是422，没有转换设备，怎么办。（232与422互转的简单方法）</p><blockquote><p> 这个情况我遇到过，客户的设备是422通信的，但是我手上并没有422设备，只有232通信可以测试。因此就需要把422转成232进行通信。<br> 刚才也讲了422和232的接线，因为这两个都是全双工的，接收和发送都是分到的，而422只是以一种差分信号进行传输。<br> 把422的Rx+与232的TX接，422的RX-与232的GND接。<br> 把422的TX+与232的RX接，422的TX-与232的GDN接。<br> 这样，422设备要发送数据的，就可以发送到了232的RX上。232的TX发数据后，由于TX和GND也形成了差分信号给422，422就可以接收到数据了。</p></blockquote><p>5、用232通信没问题，用485通信没问题，使用232转485之后就通信不稳定。</p><blockquote><p> 232和485从通信原理上，最大一个差别是全双工和半双工的区别。可是应用层发送数据和接收数据才不管底下是全双工还是半双工。<br> 但是485就得管了。因为既然是半双工，就得严格保证通路上只能有发送或只能有接收的数据，一旦同时有发送和接收，数据就会冲突了。所以解决的办法就是主站设备，也就是主动命令的一方就需要严格控制好发送数据命令的节奏了。当然有些232转485的设备做的比较好了，可以优化这个，但是主站还是要控制，比较把通信速率调节慢一些（不是调节波特率）。</p></blockquote><p>6、485单独接每个设备都通信正常，多个从站接一块通信就不稳定。</p><p>7、要想实现两个屏或两个主站通过485访问modbus设备，有什么好的办法。</p><blockquote><p>在485通信中，基本上是一主多从。但是遇到一些客户实际使用中，有客户想用两个屏来访问一个modbus设备的。目前暂时还没有好的办法。等这个功能出来后，再来给大家演示操作吧。</p></blockquote><p> 8、针对串口通信的弱点，在使用上应该要注意哪些地方。</p><blockquote><p>1）信号干扰的问题。<br> 建议使用带屏蔽线，接线要严格，比如要接地。有些485通信上，还考虑接上终端电阻来匹配。如果是232，尽量不要让线太长。通信协议上尽量避免长报文的数据通信。<br> 2）波特率匹配的问题。<br> 因为有些设备的计算的波特率是存在误差的，特别是一些控制器，由于使用的晶振不一样。因此在一些波特率比如9600波特率就存在误差。存在误差带来的影响是什么呢。因为接收方是通过时间来计算一个位的。那么如果一个报文过长，就会存在误差积累的问题，算着算着就偏了。所以，这也是串口通信不稳定的一些地方，在使用上应注意避免发送太长数据的包。<br> 3）在一些可能会存在干扰的情况，在有的选的情况，可以考虑使用奇校验或者偶校验。因为虽说出现错误的可能性不大，但既然存在干扰，如果加了校验，至少可以把错误的报文过滤掉。总好比没有校验然后通信数据错了不知道。或者尽量使用一些带校验的协议，防止数据出错。<br> 4） 串口通信本来就比较慢，请降低对数据响应的要求。<br> 因为串口通信本身就比以太网慢。而且，串口通信并不是能像CPU那样多线程处理。因为就一个口一个线数据出去，即便你应用到程序再怎么用多线程处理数据，但是最底下也只有一个口出去，一次也只能传一个位，一个字节过去。因为有客户在使用9600的波特率通信，但是又希望多少的数据可以在多少毫秒内得到响应。</p></blockquote><p> 为什么不用同步通信呢。<br> 刚才提到，同步通信需要依赖于时钟信号。这就存在一个问题，这个时钟信号是谁来发起呢。在同步通信中，往往需要一个主设备发起时钟信号读从模块的数据。在实际中，有屏读PLC，有屏读屏的数据。而单纯地从异步串口通信来说，是没有主从之说，双方都是平等的角色，都可以互发信息，互收信息。而同步通信一般是应用于CPU读一些模块，由CPU发起时钟信号，比如读SD卡模块，就可以通过SPI方式，还有一些传感器模块。</p>]]></content>
    
    
    <summary type="html">串口通信的三种通讯方式讲解，以及串口通信的基本概念</summary>
    
    
    
    
    <category term="编程" scheme="https://hanblog.xyz/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C#" scheme="https://hanblog.xyz/tags/C/"/>
    
    <category term="Iot" scheme="https://hanblog.xyz/tags/Iot/"/>
    
  </entry>
  
  <entry>
    <title>C#串行通信</title>
    <link href="https://hanblog.xyz/posts/50879689.html"/>
    <id>https://hanblog.xyz/posts/50879689.html</id>
    <published>2019-11-12T05:53:14.000Z</published>
    <updated>2019-11-12T05:53:14.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="串口通信定义"><a href="#串口通信定义" class="headerlink" title="串口通信定义"></a>串口通信定义</h3><blockquote><p>来源：<a href="https://baike.baidu.com/item/%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/3775296">百度百科：串口通信</a></p></blockquote><p><a href="https://baike.baidu.com/item/%E4%B8%B2%E8%A1%8C%E6%8E%A5%E5%8F%A3/2909564">串行接口</a>是一种可以将接收来自<a href="https://baike.baidu.com/item/CPU">CPU</a>的<a href="https://baike.baidu.com/item/%E5%B9%B6%E8%A1%8C/33188">并行</a>数据字符转换为连续的串行数据流发送出去，同时可将接收的串行数据流转换为并行的数据字符供给CPU的器件。一般完成这种功能的电路，我们称为串行接口电路。</p><p><a href="https://baike.baidu.com/item/%E4%B8%B2%E5%8F%A3">串口</a>通信（Serial Communications）的概念非常简单，串口按位（bit）发送和接收<a href="https://baike.baidu.com/item/%E5%AD%97%E8%8A%82/1096318">字节</a>的通信方式。</p><h3 id="波特率"><a href="#波特率" class="headerlink" title="波特率"></a>波特率</h3><p> 在串口通信中波特率就是每秒能传输的数据位  。 信息传输通道中，携带数据信息的信号单元叫码元，每秒钟通过信道传输的码元数称为码元传输速率，简称波特率 。波特率越大传输速度越快，相对的传输距离越短。</p><p>常用波特率有： 300、600、1200、2400、4800、9600、19200、38400、43000、56000、57600、115200</p><p>波特率7可以自定义。在数据传输和接收双方，需要统一波特率，以便正确的传输数据。 </p><h3 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h3><p>  可以认为是设备与外界通讯交流的出口。端口是指接口电路中的一些寄存器，这些寄存器分别用来存放数据信息、控制信息和状态信息，相应的端口分别称为数据端口、控制端口和状态端口。</p><p> 端口号可以理解为我们常用的端口号：<code>http://localhost:8001</code>，这里面8001是端口号，对应的是一个服务。在串口通信中的一个端口号也对应一个设备服务，如:<code>COM1</code></p><p>相关链接：<a href="https://zhidao.baidu.com/question/189086.html">端口是什么</a></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>首先需要添加Nuget包：<code>System.IO.Ports</code></p><blockquote><p> Install-Package System.IO.Ports</p></blockquote><p>向COM1端口发送HelloWorld;</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.IO.Ports;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> port = <span class="keyword">new</span> SerialPort(<span class="string">&quot;COM1&quot;</span>)<span class="comment">//端口号</span></span><br><span class="line">    &#123;</span><br><span class="line">        BaudRate=<span class="number">9600</span>,<span class="comment">//波特率</span></span><br><span class="line">    &#125;</span><br><span class="line">    port.Open();<span class="comment">//打开一个新的串口连接。</span></span><br><span class="line">    port.Write(<span class="string">&quot;Hello World&quot;</span>);<span class="comment">//向串行端口内写入数据</span></span><br><span class="line">    port.Close();<span class="comment">//关闭串口连接</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>端口号扫描</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">System.IO.Ports.SerialPort.GetPortNames();</span><br></pre></td></tr></table></figure><hr><p>以上均为个人理解，如有错误还请指出</p>]]></content>
    
    
    <summary type="html">串口通讯（Serial Communication）是一种设备间非常常用的串行通讯方式，因为它简单便捷，大部分电子设备都支持该通讯方式，电子工程师在调试设备时也经常使用该通讯方式输出调试信息。</summary>
    
    
    
    
    <category term="编程" scheme="https://hanblog.xyz/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C#" scheme="https://hanblog.xyz/tags/C/"/>
    
    <category term="Iot" scheme="https://hanblog.xyz/tags/Iot/"/>
    
  </entry>
  
  <entry>
    <title>C# timeout</title>
    <link href="https://hanblog.xyz/posts/c820a209.html"/>
    <id>https://hanblog.xyz/posts/c820a209.html</id>
    <published>2019-10-30T06:50:19.000Z</published>
    <updated>2019-10-30T06:50:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前介绍了Polly，里面也有一个Timeout的策略，但是我还是按捺不住整了一个方法出来。</p><p><code>【名词解释】整:网上找</code></p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">region</span> 超时策略</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 有返回值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> <span class="title">Task</span>&lt;<span class="title">TResult</span>&gt; <span class="title">TimeoutAfter</span>&lt;<span class="title">TResult</span>&gt;(<span class="params">Task&lt;TResult&gt; task, TimeSpan timeout</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> token = <span class="keyword">new</span> CancellationTokenSource())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> completedTask = <span class="keyword">await</span> Task.WhenAny(task, Task.Delay(timeout, token.Token));</span><br><span class="line">        <span class="keyword">if</span> (completedTask == task)</span><br><span class="line">        &#123;</span><br><span class="line">            token.Cancel();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">await</span> task;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> TimeoutException(<span class="string">&quot;方法执行超时&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无返回值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">TimeoutAfter</span>(<span class="params">Task task, TimeSpan timeout</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> token = <span class="keyword">new</span> CancellationTokenSource())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> completedTask = <span class="keyword">await</span> Task.WhenAny(task, Task.Delay(timeout, token.Token));</span><br><span class="line">        <span class="keyword">if</span> (completedTask == task)</span><br><span class="line">        &#123;</span><br><span class="line">            token.Cancel();</span><br><span class="line">            <span class="keyword">await</span> task;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> TimeoutException(<span class="string">&quot;方法执行超时&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endregion</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">C#方法执行超时策略，限制方法执行时间</summary>
    
    
    
    
    <category term="编程" scheme="https://hanblog.xyz/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C#" scheme="https://hanblog.xyz/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>.Net Core微服务架构Polly熔断降级策略</title>
    <link href="https://hanblog.xyz/posts/19153083.html"/>
    <id>https://hanblog.xyz/posts/19153083.html</id>
    <published>2019-09-05T15:09:26.000Z</published>
    <updated>2019-09-05T15:09:26.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>熔断机制（Circuit Breaker）</strong>，也叫<strong>自动停盘机制</strong>，是指当<a href="https://baike.baidu.com/item/%E8%82%A1%E6%8C%87/3342555">股指</a><a href="https://baike.baidu.com/item/%E6%B3%A2%E5%B9%85/6961924">波幅</a>达到规定的熔断点时，<a href="https://baike.baidu.com/item/%E4%BA%A4%E6%98%93%E6%89%80/6148547">交易所</a>为控制风险采取的暂停交易措施。<br>具体来说是对某一合约在达到<a href="https://baike.baidu.com/item/%E6%B6%A8%E8%B7%8C%E5%81%9C%E6%9D%BF/3451164">涨跌停板</a>之前，设置一个<a href="https://baike.baidu.com/item/%E7%86%94%E6%96%AD%E4%BB%B7%E6%A0%BC/8868258">熔断价格</a>，使合约买卖报价在一段时间内只能在这一价格范围内交易的机制。</p><p>之所以叫“熔断”，是因为这一机制的原理和电路保险摊类似，一旦电压异常，保险丝会自动熔断以免电器受损。</p><h3 id="Polly是什么"><a href="#Polly是什么" class="headerlink" title="Polly是什么"></a>Polly是什么</h3><blockquote><p>Polly是一个被.NET基金会认可的弹性和瞬态故障处理库，允许开发人员以流畅和线程安全的方式表达重试，断路器，超时，隔板隔离和降级等策略。以更友好的方式维护我们的程序。</p><p>官方网址：<strong><a href="http://www.thepollyproject.org/">www.thepollyproject.org</a></strong></p><p>开源地址：<strong><a href="https://github.com/App-vNext/Polly">https://github.com/App-vNext/Polly</a></strong></p></blockquote><h3 id="弹性策略"><a href="#弹性策略" class="headerlink" title="弹性策略"></a>弹性策略</h3><p>Polly提供多种策略：</p><table><thead><tr><th>策略</th><th>适用范围</th><th>描述</th><th>效果</th></tr></thead><tbody><tr><td>重试（<strong>Retry</strong>）</td><td>故障是短暂的，并且可能在短暂延迟后自我纠正。</td><td>“也许这只是昙花一现”</td><td>配置自动重试</td></tr><tr><td>断路器（<strong>Circuit-breaker</strong>）</td><td>当系统严重错误时，快速失败比让用户等待更好。</td><td>“如果它受伤就停止这样做”</td><td>当故障超过某个预先配置的阈值时，禁止执行</td></tr><tr><td>阻塞断路器（<strong>Circuit-breaker</strong>）</td><td>保护故障系统免于过载可以帮助它恢复。</td><td>“他太累了，让他休息一下”</td><td>当故障超过某个预先配置的阈值时，阻塞执行</td></tr><tr><td>超时（<strong>Timeout</strong>）</td><td>超过一定的等待，成功的结果是不可能的。</td><td>“别一直等下去了”</td><td>保证调用者不必等待超时。感觉与当前网关效果一致</td></tr><tr><td>隔板隔离（<strong>Bulkhead Isolation</strong>）</td><td>当进程出现故障，多个失败的请求很容易占满服务器资源（线程/CPU）。<br/>一个处于故障状态的下游系统，也会导致其上游系统故障。</td><td>“一个错误不应该沉没整艘船”</td><td>将严格管控故障进程，使其使用固定大小的资源池，隔离他们对其他进程的潜在影响</td></tr><tr><td>缓存（<strong>Cache</strong>）</td><td>一定比例的请求可能是相似的。</td><td>“你以前问过那个”</td><td>从缓存中提供已知的响应。<br/>当第一次读取的时候，将响应自动缓存起来。</td></tr><tr><td>降级（<strong>FullBack</strong>）</td><td>事情仍然会失败 ，你会做什么。</td><td>“看来还是得你来”</td><td>定义在失败时返回的替代值（或要执行的操作）。</td></tr><tr><td>包装策略（<strong>PolicyWrap</strong>）</td><td>不同的故障需要不同的策略 弹性意味着使用组合。</td><td>“一起保护好这个结果”</td><td>允许灵活组合上述任何策略</td></tr></tbody></table><h3 id="引用Polly"><a href="#引用Polly" class="headerlink" title="引用Polly"></a>引用Polly</h3><p>管理Nuget包，搜索Polly:</p><p><img src="http://yanxuan.nosdn.127.net/7badf87efc749b8735f7524d3ffdbc14.png" alt="PollyNuget"></p><p>或者高端一点：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Install-Package</span> Polly</span><br></pre></td></tr></table></figure><h3 id="Polly基础使用"><a href="#Polly基础使用" class="headerlink" title="Polly基础使用"></a>Polly基础使用</h3><p>（防止剧透，部分代码由UTF-16编码）</p><p>重试策略：</p><blockquote><p>1.简单使用</p></blockquote><p><img src="http://yanxuan.nosdn.127.net/f66820dfd21ec4ef9ac520f578e32c9f.png" alt="简单使用"></p><blockquote><p>2.重试策略</p></blockquote><p><img src="http://yanxuan.nosdn.127.net/2573ff10219425288265a3b35695f245.png" alt="UTOOLS1567835254221.png"></p><p><img src="http://yanxuan.nosdn.127.net/725412d0494551fe7d601782b55d3dc4.png" alt="UTOOLS1567835317592.png"></p><p><img src="http://yanxuan.nosdn.127.net/702ba927685c679443d581ecceff245a.png" alt="UTOOLS1567835337994.png"></p><blockquote><p>3.降级策略</p></blockquote><p><img src="http://yanxuan.nosdn.127.net/e679864c217c8f937a20b0a131939100.png" alt="1567835372451.png"></p><blockquote><p>4.超时策略</p></blockquote><p><img src="http://yanxuan.nosdn.127.net/7a76705caa36bc9a1762e0388dba8689.png" alt="UTOOLS1567835391802.png"></p><blockquote><p>5.包装策略</p></blockquote><p><img src="http://yanxuan.nosdn.127.net/26cb1d471305e1feb74a44999c315521.png" alt="UTOOLS1567835435697.png"></p><h3 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h3><p><a href="https://git.dev.tencent.com/HanBlog/HelloPolly.git">https://git.dev.tencent.com/HanBlog/HelloPolly.git</a></p>]]></content>
    
    
    <summary type="html">.Net Core中的弹性和瞬态故障处理库Polly。允许我们以非常顺畅和线程安全的方式来执诸如行重试，断路，超时，故障恢复等策略。更能让我们重视出现异常时的处理方式。</summary>
    
    
    
    
    <category term="编程" scheme="https://hanblog.xyz/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C#" scheme="https://hanblog.xyz/tags/C/"/>
    
    <category term=".Net" scheme="https://hanblog.xyz/tags/Net/"/>
    
    <category term=".Net Core" scheme="https://hanblog.xyz/tags/Net-Core/"/>
    
    <category term="微服务" scheme="https://hanblog.xyz/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>C#元组的使用</title>
    <link href="https://hanblog.xyz/posts/ae939afa.html"/>
    <id>https://hanblog.xyz/posts/ae939afa.html</id>
    <published>2019-08-05T07:28:52.000Z</published>
    <updated>2019-08-05T07:28:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>元组(Tuple)是在C# 4.0时出的新特性，需要.Net Framework 4.0以上版本支持。</p><p>元组是一种数据结构，具有特定数量和元素序列。</p><h4 id="创建一个元组"><a href="#创建一个元组" class="headerlink" title="创建一个元组"></a>创建一个元组</h4><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> testTuple = <span class="keyword">new</span> Tuple&lt;<span class="built_in">string</span>, <span class="built_in">string</span>, <span class="built_in">string</span>&gt;(<span class="string">&quot;这&quot;</span>, <span class="string">&quot;是一个&quot;</span>, <span class="string">&quot;元组&quot;</span>);</span><br><span class="line">Console.WriteLine(test.Item1 + test.Item2 + test.Item3);</span><br></pre></td></tr></table></figure><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>从方法返回多个值</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 获取坐标</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> Tuple&lt;<span class="built_in">double</span>, <span class="built_in">double</span>&gt; <span class="title">GetCoordin</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> Tuple&lt;<span class="built_in">double</span>, <span class="built_in">double</span>&gt;(<span class="number">113.372901</span>,<span class="number">34.779973</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> coordin=GetCoordin();</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;经度：<span class="subst">&#123;coordin.Item1&#125;</span>,纬度：<span class="subst">&#123;coordin.Item2&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="每一次都声明一个元组太麻烦了？"><a href="#每一次都声明一个元组太麻烦了？" class="headerlink" title="每一次都声明一个元组太麻烦了？"></a>每一次都声明一个元组太麻烦了？</h4><p>来试试值元组(ValueTuple)，ValueTuple是C# 7.0的新特性，使用时需要.Net Framework 4.7以上版本支持或者4.0以上安装System.ValueType包</p><p>值元组也是一种数据结构，用于表示特定数量和元素序列，但是是和元组类不一样的，主要区别如下：</p><ul><li>值元组是结构，是值类型，不是类，而元组（Tuple）是类，引用类型；</li><li>值元组元素是可变的，不是只读的，也就是说可以改变值元组中的元素值；</li><li>值元组的数据成员是字段不是属性。</li></ul><p>要注意的是：ValueTuple是结构类型，微软建议超过64字节不要使用结构，对ValueTuple 同样有效。</p><h4 id="创建一个值元组"><a href="#创建一个值元组" class="headerlink" title="创建一个值元组"></a>创建一个值元组</h4><p>值元组可以像元组一样利用构造函数创建</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 获取坐标</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> ValueTuple&lt;<span class="built_in">double</span>, <span class="built_in">double</span>&gt; <span class="title">GetCoordinByValueTuple</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> ValueTuple&lt;<span class="built_in">double</span>, <span class="built_in">double</span>&gt;(<span class="number">113.372901</span>, <span class="number">34.779973</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> coordin=GetCoordin();</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;经度：<span class="subst">&#123;coordin.Item1&#125;</span>,纬度：<span class="subst">&#123;coordin.Item2&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>也可以用Tuple静态方法构建元组,最多支持八个元素</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 获取坐标</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> ValueTuple&lt;<span class="built_in">double</span>, <span class="built_in">double</span>&gt; <span class="title">GetCoordinByStatic</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="keyword">return</span> ValueTuple.Create(<span class="number">113.372901</span>, <span class="number">34.779973</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> coordin=GetCoordin();</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;经度：<span class="subst">&#123;coordin.Item1&#125;</span>,纬度：<span class="subst">&#123;coordin.Item2&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>还是麻烦？真是拿你们没办法哟，把ValueTuple扔掉，直接用小括号</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> (<span class="built_in">double</span>,<span class="built_in">double</span>) GetCoordinByParenthesis()</span><br><span class="line">&#123;</span><br><span class="line">     <span class="keyword">return</span> (<span class="number">113.372901</span>, <span class="number">34.779973</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> coordin=GetCoordin();</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;经度：<span class="subst">&#123;coordin.Item1&#125;</span>,纬度：<span class="subst">&#123;coordin.Item2&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>返回值可以指定元素名字，方便理解记忆赋值和访问，:exclamation: 所有的元素名字都只是设计和编译时用的，不是运行时用的（因此注意对该类型的序列化和反序列化操作）；</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> (<span class="built_in">double</span> Lon, <span class="built_in">double</span> Lat) GetCoordinByName()</span><br><span class="line">&#123;</span><br><span class="line">     <span class="keyword">return</span> (<span class="number">113.372901</span>, <span class="number">34.779973</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> coordin=GetCoordin();</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;经度：<span class="subst">&#123;coordin.Lon&#125;</span>,纬度：<span class="subst">&#123;coordin.Lon&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>在使用时也可以构造局部变量，同时可以用_来忽略不需要的元素</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> (<span class="built_in">double</span> Lon, <span class="built_in">double</span> Lat) GetCoordinByName()</span><br><span class="line">&#123;</span><br><span class="line">     <span class="keyword">return</span> (<span class="number">113.372901</span>, <span class="number">34.779973</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> (_,lon)=GetCoordin();</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;纬度：<span class="subst">&#123;lon&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>告辞:smirk:</p>]]></content>
    
    
    <summary type="html">使用out? ref? 不存在的!因为懒,所以创造一切.元组是具有特定数列和元素序列的数据结构,你可以将他视为一个不含任何实际属性的类,或者由于你懒于创建一个类去实现一些行为而用于替代的东西.</summary>
    
    
    
    
    <category term="编程" scheme="https://hanblog.xyz/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C#" scheme="https://hanblog.xyz/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>vue-监控多个属性</title>
    <link href="https://hanblog.xyz/posts/370b388.html"/>
    <id>https://hanblog.xyz/posts/370b388.html</id>
    <published>2019-07-05T01:54:37.000Z</published>
    <updated>2019-07-05T01:54:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>在使用vue的时候,会遇到多个属性变化都需要做同一个操作的情况.</p><p>第一个办法是每一个属性都写一个监控事件.但是作为一个强迫症程序员,不希望代码中出现大量的重复代码.</p><p>所以我们可以写一个计算属性进行操作:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">computed:&#123;</span><br><span class="line">param: function () &#123;</span><br><span class="line">            const &#123;</span><br><span class="line">                属性一,</span><br><span class="line">                属性二,</span><br><span class="line">                属性三,</span><br><span class="line">                ...</span><br><span class="line">            &#125; &#x3D; this</span><br><span class="line">            return &#123;</span><br><span class="line">                属性一,</span><br><span class="line">                属性二,</span><br><span class="line">                属性三,</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;,</span><br><span class="line">watch:&#123;</span><br><span class="line">param:function () &#123;</span><br><span class="line">&#x2F;&#x2F;监控代码</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">vue中如何同时监控多个属性的变化</summary>
    
    
    
    
    <category term="编程" scheme="https://hanblog.xyz/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="vue" scheme="https://hanblog.xyz/tags/vue/"/>
    
    <category term="前端" scheme="https://hanblog.xyz/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>秒杀系统设计分析</title>
    <link href="https://hanblog.xyz/posts/e3831ce5.html"/>
    <id>https://hanblog.xyz/posts/e3831ce5.html</id>
    <published>2019-06-04T06:51:05.000Z</published>
    <updated>2019-06-04T06:51:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是秒杀"><a href="#什么是秒杀" class="headerlink" title="什么是秒杀"></a>什么是秒杀</h2><p>通俗一点讲就是网络商家为促销等目的组织的网上限时抢购活动</p><p>比如说京东秒杀，就是一种定时定量秒杀，在规定的时间内，无论商品是否秒杀完毕，该场次的秒杀活动都会结束。这种秒杀，对时间不是特别严格，只要下手快点，秒中的概率还是比较大的。</p><p>淘宝以前就做过一元抢购，一般都是限量 1 件商品，同时价格低到「令人发齿」，这种秒杀一般都在开始时间 1 到 3 秒内就已经抢光了，参与这个秒杀一般都是看运气的，不必太强求</p><h2 id="业务特点"><a href="#业务特点" class="headerlink" title="业务特点"></a>业务特点</h2><p><img src="https://upload-images.jianshu.io/upload_images/5458820-914a120065843dbc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000" alt="img"></p><h3 id="瞬时并发量大"><a href="#瞬时并发量大" class="headerlink" title="瞬时并发量大"></a>瞬时并发量大</h3><p>秒杀时会有大量用户在同一时间进行抢购，瞬时并发访问量突增 10 倍，甚至 100 倍以上都有。</p><h3 id="库存量少"><a href="#库存量少" class="headerlink" title="库存量少"></a>库存量少</h3><p>一般秒杀活动商品量很少，这就导致了只有极少量用户能成功购买到。</p><h3 id="业务简单"><a href="#业务简单" class="headerlink" title="业务简单"></a>业务简单</h3><p>流程比较简单，一般都是下订单、扣库存、支付订单</p><h2 id="技术难点"><a href="#技术难点" class="headerlink" title="技术难点"></a>技术难点</h2><p><img src="https://upload-images.jianshu.io/upload_images/5458820-09ae21ab50f45be2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000" alt="img"></p><h3 id="现有业务的冲击"><a href="#现有业务的冲击" class="headerlink" title="现有业务的冲击"></a>现有业务的冲击</h3><p>秒杀是营销活动中的一种，如果和其他营销活动应用部署在同一服务器上，肯定会对现有其他活动造成冲击，极端情况下可能导致整个电商系统服务宕机</p><h3 id="直接下订单"><a href="#直接下订单" class="headerlink" title="直接下订单"></a>直接下订单</h3><p>下单页面是一个正常的 URL 地址，需要控制在秒杀开始前，不能下订单，只能浏览对应活动商品的信息。简单来说，需要 Disable 订单按钮</p><h3 id="页面流量突增"><a href="#页面流量突增" class="headerlink" title="页面流量突增"></a>页面流量突增</h3><p>秒杀活动开始前后，会有很多用户请求对应商品页面，会造成后台服务器的流量突增，同时对应的网络带宽增加，需要控制商品页面的流量不会对后台服务器、DB、Redis 等组件的造成过大的压力</p><h2 id="架构设计思想"><a href="#架构设计思想" class="headerlink" title="架构设计思想"></a>架构设计思想</h2><p><img src="https://upload-images.jianshu.io/upload_images/5458820-b236892ecef63087.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000" alt="img"></p><h3 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h3><p>由于活动库存量一般都是很少，对应的只有少部分用户才能秒杀成功。所以我们需要限制大部分用户流量，只准少量用户流量进入后端服务器</p><h3 id="削峰"><a href="#削峰" class="headerlink" title="削峰"></a>削峰</h3><p>秒杀开始的那一瞬间，会有大量用户冲击进来，所以在开始时候会有一个瞬间流量峰值。如何把瞬间的流量峰值变得更平缓，是能否成功设计好秒杀系统的关键因素。实现流量削峰填谷，一般的采用缓存和 MQ 中间件来解决</p><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><p>秒杀其实可以当做高并发系统来处理，在这个时候，可以考虑从业务上做兼容，将同步的业务，设计成异步处理的任务，提高网站的整体可用性</p><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>秒杀系统的瓶颈主要体现在下订单、扣减库存流程中。在这些流程中主要用到 OLTP 的数据库，类似 MySQL、SQLServer、Oracle。由于数据库底层采用 B+ 树的储存结构，对应我们随机写入与读取的效率，相对较低。如果我们把部分业务逻辑迁移到内存的缓存或者 Redis 中，会极大的提高并发效率</p><h2 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h2><p><img src="https://upload-images.jianshu.io/upload_images/5458820-1146001e3d3a1f40.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000" alt="img"></p><h2 id="客户端优化"><a href="#客户端优化" class="headerlink" title="客户端优化"></a>客户端优化</h2><h3 id="秒杀页面"><a href="#秒杀页面" class="headerlink" title="秒杀页面"></a>秒杀页面</h3><p>秒杀活动开始前，其实就有很多用户访问该页面了。如果这个页面的一些资源，比如 CSS、JS、图片、商品详情等，都访问后端服务器，甚至 DB 的话，服务肯定会出现不可用的情况。所以一般我们会把这个页面整体进行静态化，并将页面静态化之后的页面分发到 CDN 边缘节点上，起到压力分散的作用</p><h3 id="防止提前下单"><a href="#防止提前下单" class="headerlink" title="防止提前下单"></a>防止提前下单</h3><p>防止提前下单主要是在静态化页面中加入一个 JS 文件引用，该 JS 文件包含活动是否开始的标记以及开始时的动态下单页面的 URL 参数。同时，这个 JS 文件是不会被 CDN 系统缓存的，会一直请求后端服务的，所以这个 JS 文件一定要很小。当活动快开始的时候（比如提前），通过后台接口修改这个 JS 文件使之生效</p><h2 id="API-接入层优化"><a href="#API-接入层优化" class="headerlink" title="API 接入层优化"></a>API 接入层优化</h2><p>客户端优化，对于不是搞计算机方面的用户还是可以防止住的。但是稍有一定网络基础的用户就起不到作用了，因此服务端也需要加些对应控制，不能信任客户端的任何操作。一般控制分为 2 大类</p><h3 id="限制用户维度访问频率"><a href="#限制用户维度访问频率" class="headerlink" title="限制用户维度访问频率"></a>限制用户维度访问频率</h3><p>针对同一个用户（ Userid 维度），做页面级别缓存，单元时间内的请求，统一走缓存，返回同一个页面</p><h3 id="限制商品维度访问频率"><a href="#限制商品维度访问频率" class="headerlink" title="限制商品维度访问频率"></a>限制商品维度访问频率</h3><p>大量请求同时间段查询同一个商品时，可以做页面级别缓存，不管下回是谁来访问，只要是这个页面就直接返回</p><h2 id="SOA-服务层优化"><a href="#SOA-服务层优化" class="headerlink" title="SOA 服务层优化"></a>SOA 服务层优化</h2><p>上面两层只能限制异常用户访问，如果秒杀活动运营的比较好，很多用户都参加了，就会造成系统压力过大甚至宕机，因此需要后端流量控制</p><p>对于后端系统的控制可以通过消息队列、异步处理、提高并发等方式解决。对于超过系统水位线的请求，直接采取 「Fail-Fast」原则，拒绝掉</p><h2 id="秒杀整体流程图"><a href="#秒杀整体流程图" class="headerlink" title="秒杀整体流程图"></a>秒杀整体流程图</h2><p><img src="https://upload-images.jianshu.io/upload_images/5458820-1eda6808754dbbbf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/761" alt="img"></p><p>秒杀系统核心在于层层过滤，逐渐递减瞬时访问压力，减少最终对数据库的冲击。通过上面流程图就会发现压力最大的地方在哪里？</p><p>MQ 排队服务，只要 MQ 排队服务顶住，后面下订单与扣减库存的压力都是自己能控制的，根据数据库的压力，可以定制化创建订单消费者的数量，避免出现消费者数据量过多，导致数据库压力过大或者直接宕机。</p><p>库存服务专门为秒杀的商品提供库存管理，实现提前锁定库存，避免超卖的现象。同时，通过超时处理任务发现已抢到商品，但未付款的订单，并在规定付款时间后，处理这些订单，将恢复订单商品对应的库存量</p><h2 id="Nginx优化"><a href="#Nginx优化" class="headerlink" title="Nginx优化"></a>Nginx优化</h2><ol><li>动静分离，不走tomcat获取静态资源</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">       listen       8088;</span><br><span class="line">   location ~ \.(gif|jpg|jpeg|png|bmp|swf)$ &#123;  </span><br><span class="line">       root    C:&#x2F;Users&#x2F;502764158&#x2F;Desktop&#x2F;test;  </span><br><span class="line">   &#125; </span><br><span class="line"></span><br><span class="line">   location ~ \.(jsp|do)$ &#123;</span><br><span class="line">           proxy_pass http:&#x2F;&#x2F;localhost:8082;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>gzip压缩，减少静态文件传输的体积，节省带宽，提高渲染速度</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gzip on;</span><br><span class="line">gzip_min_length 1k;</span><br><span class="line">gzip_buffers 4 16k;</span><br><span class="line">gzip_comp_level 3;</span><br><span class="line">gzip_disable &quot;MSIE [1-6]\.&quot;;</span><br><span class="line">gzip_types   text&#x2F;plain application&#x2F;x-javascript text&#x2F;css application&#x2F;xml text&#x2F;javascript image&#x2F;jpeg image&#x2F;gif image&#x2F;png;</span><br></pre></td></tr></table></figure><ol><li>配置集群负载和容灾，设置失效重连的时间，失效后，定期不会再重试挂掉的节点,参数</li></ol><ul><li>fail_timeout默认为10s</li><li>max_fails默认为1。就是说，只要某个server失效一次，则在接下来的10s内，就不会分发请求到该server上</li><li>proxy_connect_timeout 后端服务器连接的超时时间_发起握手等候响应超时时间</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">upstream  netitcast.com &#123;  </span><br><span class="line">  #服务器集群名字   </span><br><span class="line">  server    127.0.0.1:8080;</span><br><span class="line">  server    127.0.0.1:38083;</span><br><span class="line">  server    127.0.0.1:8083;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">  listen       88;</span><br><span class="line">  server_name  localhost;</span><br><span class="line">  location &#x2F; &#123;  </span><br><span class="line">    proxy_pass http:&#x2F;&#x2F;netitcast.com;  </span><br><span class="line">    proxy_connect_timeout       1;</span><br><span class="line">    fail_timeout 5;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>集成Varnish做静态资源的缓存</li><li>集成tengine做过载的保护</li></ol><h2 id="页面优化"><a href="#页面优化" class="headerlink" title="页面优化"></a>页面优化</h2><ol><li>降低交互的压力</li></ol><ul><li>尽量把js、css文件放在少数几个里面，减少浏览器和后端交互获取静态资源的次数</li><li>尽量避免在秒杀商品页面使用大的图片，或者使用过多的图片</li></ul><ol><li>安全控制</li></ol><ul><li>时间有效性验证：未到秒杀时间不能进行抢单，并且同时程序后端也要做时间有效性验证，因为网页的时间和各自的系统时间决定，而且秒杀器可以通过绕开校验直接调用抢单</li><li>异步抢单：通过点击按钮刷新抢宝，而不是刷新页面的方式抢宝（答题验证码等等也是ajax交互）</li><li>redis做IP限流</li><li>redis做UserId限流</li></ul><h2 id="Redis集群"><a href="#Redis集群" class="headerlink" title="Redis集群"></a>Redis集群</h2><ol><li>分布式锁（悲观锁）</li><li>缓存热点数据（库存）：如果QPS太高的话，另一种方案是通过localcache，分布式状态一致性通过数据库来控制</li><li>分布式悲观锁（参考redis悲观锁的代码）</li></ol><ul><li>悲观锁（因为肯定争抢严重）</li><li>Expire时间（抢到锁后，立刻设置过期时间，防止某个线程的异常停摆，导致整个业务的停摆）</li><li>定时循环和快速反馈（for缓存有超时设置，每次超时后，重新读取一次库存，还有货再进行第二轮的for循环争夺，实现快速反馈，避免没有货了还在持续抢锁）</li></ul><ol><li>异步处理订单</li></ol><ul><li>redis抢锁成功后，记录抢到锁的用户信息后，就可以直接释放锁，并反馈用户，通过异步的方式来处理订单，提升秒杀的效率，降低无意义的线程等待</li><li>为了避免异步的数据不同步，需要抢到锁的时候，在redis里面缓存用户信息列表，缓存结束后，触发抢单成功用户信息持久化，并且定时的比对一致性</li></ul><h2 id="消息队列限流"><a href="#消息队列限流" class="headerlink" title="消息队列限流"></a>消息队列限流</h2><p>消息队列削峰限流(RocketMQ自带的Consumer自带线程池和限流措施)，集群。一般都是微服务，订单中心、库存中心、积分中心、用户的商品中心</p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><ul><li>拆分事务提高并发度</li><li>根据业务需求考虑分库：读写分离、热点隔离拆分，但是会引入分布式事务问题，以及跨库操作的难度<br> 要执行的操作：扣减库存、生成新订单、生成待支付订单、扣减优惠券、积分变动<br> 库存表是数据库并发的瓶颈所在，需要在事务控制上做权衡：可以把扣减库存设置成一个独立的事务，其它操作成一个大的事务（订单、优惠券、积分操作），提高并发度，但是要做好额外的check<br> update 库存表 set 库存=库存-1 where id=** and 库存&gt;1</li><li>为了提升并发，需要在事务上做妥协<br> 单机上拆分事务：比如扣减库存表+(生成待支付订单+优惠券扣减+积分变动)是一个大的事务，为了提高并发，可以拆分为2个事务<br> 分库以后引入分布式事务问题,为了保证用户体验，最好还是通过日志分析来人工维护，否则阻塞太严重，并发差</li></ul><h2 id="答题验证码"><a href="#答题验证码" class="headerlink" title="答题验证码"></a>答题验证码</h2><ol><li>可以防止秒杀器的干扰，让更多用户有机会抢到</li><li>延缓请求，每个人的反应时间不同，把瞬间流量分散开来了</li><li>验证码的设计可以分为2种</li></ol><ul><li>验证失败重新刷新答题（12306）：服务器交互量大，每错一次交互一次，但是可以大大降低秒杀器答题的可能性，因为没有试错这个功能，答题一直在变<br> 验证失败提示失败，但是不刷新答题的算法：要么答题成功，进入下单界面，要么提示打错，继续答题（不刷新答题，无须交互，用js验证结果)。<br> 这种方案，可以在加载题目的时候一起加载MD5加密的答案，然后后台再校验一遍，实现类似的防止作弊的效果。好处是不需要额外的服务器交互。<br> MD加密答案的算法里面要引入 userId PK这些因素进来来确保每次答案都不一样而且没有规律，避免秒杀器统计结果集</li><li>答题的验证：除了验证答案的正确性意外，还要统计反应时间，例如12306的难题，正常人类的答题速度最快是1.5s，那么，小于1s的验证可以判定为机器验证</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>层层过滤，尽量将请求拦截在上游，降低下游的压力，充分利用缓存与消息队列，提高请求处理速度以及削峰填谷的作用</p><h3 id="削峰限流"><a href="#削峰限流" class="headerlink" title="削峰限流"></a>削峰限流</h3><ul><li>前端+Redis拦截，只有redis扣减成功的请求才能进入到下游</li><li>MQ堆积订单，保护订单处理层的负载，Consumer根据自己的消费能力来取Task，实际上下游的压力就可控了。重点做好路由层和MQ的安全</li><li>引入答题验证码、请求的随机休眠等措施，削峰填谷</li></ul><h3 id="安全保护"><a href="#安全保护" class="headerlink" title="安全保护"></a>安全保护</h3><ul><li>页面和前端要做判断，防止活动未开始就抢单，防止重复点击按钮连续抢单</li><li>防止秒杀器恶意抢单，IP限流、UserId限流限购、引入答题干扰答题器，并且对答题器答题时间做常理推断</li><li>过载丢弃，QPS或者CPU等核心指标超过一定限额时，丢弃请求，避免服务器挂掉，保证大部分用户可用</li></ul><h3 id="页面优化，动静分离"><a href="#页面优化，动静分离" class="headerlink" title="页面优化，动静分离"></a>页面优化，动静分离</h3><ul><li>秒杀商品的网页内容尽可能做的简单：图片小、js css 体积小数量少，内容尽可能的做到动静分离</li><li>秒杀的抢宝过程中做成异步刷新抢宝，而不需要用户刷新页面来抢，降低服务器交互的压力</li><li>可以使用Nginx的动静分离，不通过传统web浏览器获取静态资源</li><li>nginx开启gzip压缩，压缩静态资源，减少传输带宽，提升传输速度</li><li>或者使用Varnish，把静态资源缓存到内存当中，避免静态资源的获取给服务器造成的压力</li></ul><h3 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理"></a>异步处理</h3><ul><li>redis抢单成功后，把后续的业务丢到线程池中异步的处理，提高抢单的响应速度</li><li>线程池处理时，把任务丢到MQ中，异步的等待各个子系统处理（订单系统、库存系统、支付系统、优惠券系统），异步操作有事务问题，本地事务和分布式事务，但是为了提升并发度，最好牺牲一致性。通过定时扫描统计日志，来发现有问题的订单，并且及时处理</li></ul><h3 id="热点分离"><a href="#热点分离" class="headerlink" title="热点分离"></a>热点分离</h3><p>尽量的避免秒杀功能给正常功能带来的影响，比如秒杀把服务器某个功能拖垮了<br> 分离可以提升系统的容灾性，但是完全的隔离的改造成本太高了，尽量借助中间件的配置，来实现冷热分离</p><ul><li>集群节点的分离：nginx配置让秒杀业务走的集群节点和普通业务走的集群不一样。</li><li>MQ的分离：避免秒杀业务把消息队列堆满了，普通业务的交易延迟也特别厉害。</li><li>数据库的分离：根据实际的秒杀的QPS来选择，热点数据分库以后，增加了分布式事务的问题，以及查询的时候跨库查询性能要差一些（ShardingJDBC有这种功能），所以要权衡以后再决定是否需要分库</li></ul><h3 id="避免单点"><a href="#避免单点" class="headerlink" title="避免单点"></a>避免单点</h3><p>各个环节都要尽力避免</p><h3 id="降级"><a href="#降级" class="headerlink" title="降级"></a>降级</h3><p>临时关闭一些没那么重要的功能，比如秒杀商品的转赠功能、红包的提现功能，待秒杀峰值过了，设置开关，再动态开放这些次要的功能</p><hr><p>作者：码道城攻</p><p>链接：<a href="https://www.jianshu.com/p/8b548419b4d3">https://www.jianshu.com/p/8b548419b4d3</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是秒杀&quot;&gt;&lt;a href=&quot;#什么是秒杀&quot; class=&quot;headerlink&quot; title=&quot;什么是秒杀&quot;&gt;&lt;/a&gt;什么是秒杀&lt;/h2&gt;&lt;p&gt;通俗一点讲就是网络商家为促销等目的组织的网上限时抢购活动&lt;/p&gt;
&lt;p&gt;比如说京东秒杀，就是一种定时定量秒杀，在规定</summary>
      
    
    
    
    
    <category term="系统分析" scheme="https://hanblog.xyz/tags/%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>找一个愿意给你剥虾的人在一起吧</title>
    <link href="https://hanblog.xyz/posts/b9509b9d.html"/>
    <id>https://hanblog.xyz/posts/b9509b9d.html</id>
    <published>2019-06-04T05:02:56.000Z</published>
    <updated>2019-06-04T05:02:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>昨天跟一个朋友聊天，我问她：你是因为什么下决心跟他结婚的？</p><p>她说，因为我特别爱吃虾，每次去吃虾他都会把虾剥好了放在我的盘子里，我让他也吃点，他说等我吃好了他再吃。</p><p>“就因为这点事吗？”我接着问。</p><p>她毫不犹豫的说：“这还不够吗？”</p><p>突然觉得，女生是一种超级敏感的生物，她们不是特别在意你能给她带来什么大惊喜大场面，但却会因为你没有及时回复信息而胡思乱想，会因为你在她难过的时候给的一个拥抱而感动不已。</p><p>细节能成就爱情，但细节也能打败爱情，不是吗？</p><p>你有多久没收到过他送的礼物了？他给你的承诺都去做了吗？你生气的时候他是不是还像没事人一样？他是不是还记不住你最爱吃哪家店的面？他是不是还像以前一样没把你的事放在心上？他是不是没在朋友圈给你写过一句情话……</p><p>有人说，你说的这些事都太小了，太斤斤计较了。</p><p>确实太小了，小到都不敢给周围的人讲，怕他们听出自己心里的委屈和难过，怕他们知道我在意的这些东西，我喜欢的人并不在意，怕他们知道，你并没有那么喜欢我。</p><p>看《原谅他77次》的时候，就特别心疼女主角，一次次的妥协原谅那个自私又不负责任的男人，搞得自己精疲力竭，几近崩溃。</p><p>一个人教会另一个人如何去爱的过程真的太心酸了。</p><p>你一次又一次的怠慢和冷落，你的满不在乎，你的不知道心疼，都是在慢慢消耗她对你的真心和坚持，她可以原谅你77次，也可以忍无可忍转身就走。</p><p>人会说谎，可是细节不会。找一个愿意给你剥虾的人在一起，是让你从细节里感受那个人是不是真的在乎你，心疼你。</p><p>他记得你的碎碎念，你回家晚了他会在楼下等你，他能说出你最爱吃的几样东西，他甚至会提醒你你爸妈的生日快到了，他会早起给你做早餐也会跑几条街给你买你爱吃的油条……</p><p>没有谁的爱情可以像刚认识时那样浓烈，但好的爱情，都藏那些琐碎日子里，藏在你们日复一日相处的细节里，他愿意一直把你放在心尖上，就够了。</p><p>人会说谎，可是细节不会。</p><hr><p>作者：毛毛笨蛋</p><p>链接：<a href="https://www.jianshu.com/p/70417ebd629a">https://www.jianshu.com/p/70417ebd629a</a></p>]]></content>
    
    
    <summary type="html">昨天跟一个朋友聊天，我问她：你是因为什么下决心跟他结婚的？</summary>
    
    
    
    
    <category term="分享" scheme="https://hanblog.xyz/tags/%E5%88%86%E4%BA%AB/"/>
    
    <category term="文章" scheme="https://hanblog.xyz/tags/%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>我喜欢你,我们在一起吧</title>
    <link href="https://hanblog.xyz/posts/a40aefb0.html"/>
    <id>https://hanblog.xyz/posts/a40aefb0.html</id>
    <published>2019-06-04T03:36:13.000Z</published>
    <updated>2019-06-04T03:36:13.000Z</updated>
    
    <content type="html"><![CDATA[<center>Ⅰ</center><p>毕业后的第一年，我来到成都，衣食住行，柴米油盐，全靠自己。为了省钱，便选择跟人合租。</p><p>我去了很多地方，城中村的“土著自建房”，小单间月租1000，卫生间公用，一到晚上就黑灯瞎火；更便宜的也有，一个大房间里，分成数个木板隔间，墙壁上的小孔隙，能将对面看得一清二楚。</p><p>连续找了一周，都没有能接受得了的，在酒店住着，钱用得心疼。就在我快要放弃之际，之前找的中介给我打来电话，说犀浦那儿有个不错的合租房，正规小区，套二，不过合租的对象是个年轻姑娘，养着条宠物狗，行不行就看我的个人魅力了。</p><p>那一刻心里仿佛有一道曙光，房子总算有着落了，再说我人不撇，也喜欢猫猫狗狗这些小动物，姑娘应该不会拒绝。</p><p>于是，当天我就去合租房看了看。</p><center>Ⅱ</center><p>房子在8楼，小区整个环境不错，离地铁站也挺近。我走进合租房，确实是标准的套二，室内陈设很简单，褐色的电视柜上一尘不染，没有放任何东西，玻璃茶几也收拾的干干净净，吃饭的地方是一个小圆桌，摆着几把椅子，靠近阳台那儿还有书柜和电脑桌。</p><p>我跟姑娘打招呼，做了自我介绍，并问她叫什么名字，她浅浅的笑着，让我叫她若。</p><p>若留着齐肩的短发，重庆人，23、4岁的年纪，我去的那天，她穿着浅色连衣裙，人很白很苗条，算不上大美女，但给人感觉十分的清纯、干净。她养的那只小胖狗，浑身雪白，圆圆滚滚，在我脚边窜来跳去，像个顽皮的雪球一样。</p><p>若很喜欢她的狗，她蹲下去抚摸着它，笑着对我说：“李葵很喜欢你哦。”“李逵？你的狗啊？”我想起那个杀人无数的黑大汉，再看看面前这只小可爱狗狗，不免发笑。</p><p>说罢，她又站了起来，盯着我看了一圈，说：“可以跟你同租，但不要在客厅吸烟，不要带其他人回来过夜就行了”</p><p>我立马点头道：“放心吧，我不抽烟的，刚来这儿没什么朋友，更不会胡乱带外面的人回来的。”</p><p>签了合同过后，我开始整理自己的卧室，若给我递来拖把和鸡毛掸子，并告诉我她全名叫林若。</p><p>合租生活正式开启。</p><p>我本以为，若对我的第一印象不错，接下来的合租生活会像电视里演的那样，发生一些不可描述的刺激的美妙的事情？额，好吧，我承认，自己一开始确实有些自作多情了。</p><center>Ⅲ</center><p>我工作挺忙的，加班是日常操作，回家的大多数时候，若要么在洗澡，要么在自己房间里，关着房门。</p><p>我们平时都没太多交集，我到后来也不期待能发生点什么了，回家就直接钻进卧室里，用小电饭煲，有时候煮点白饭，就着外面夜市买的小炒，有时候直接清汤挂面，加酱油辣酱。</p><p>厨房大多数时候是若在用，我除了自己的小电饭煲，就再也没有任何跟烹饪相关的东西。说实话，每次听见若在厨房里，搞得热火朝天，锅碗瓢盆的碰撞声，炒菜时的油炸裂声，我是多想冲过去说：“咱们一起吃吧，我可以买菜，你来做嘛。”</p><p>不过想了想，还是算了，自己工作调动挺大的，说不定过完年就调到别地去了，再说，这么莽撞的进去，姑娘还以为我要干什么坏事呢。</p><p>住了这么久，虽然与若说话的时间可能不超过十分钟，但我大体还是知道，这个姑娘，和我一样，孤身一人来到这个偌大又陌生的城市，一直单身，也没什么朋友。</p><p>她生活简单，很有规律，上班的时候，早上八点就走了，下午一般比我回来的早，周末大多数时候也是宅在家里，会睡懒觉，醒了后，会去厨房煮东西吃，然后在客厅里看会儿电视，玩会儿电脑。</p><p>周末我一般出去骑行或打篮球，我总在自己房间门口，蹲下去慢慢系鞋带。系了一遍又一遍，一边嘴里念着“这什么鞋带，怎么捆都捆不紧！”。然后偷偷抬眼看看她，李葵会跑过来，为了讨好这个小家伙，我特意买了一些火腿肠，弄成一小块一小块的，放在手心里喂它，若吃着东西，招呼着李葵，她声音细细的，很温柔，很好听。</p><p>转眼间就到11月份了，成都的湿冷天气开始放着大招，连续下了几天的雨，细细绵绵。我的生活还是一样，合租小半年了，与若之间，互相碰面，会点头问好，在家里，不是特别重要的事，我们都不会去敲对方的房门。</p><p>我们将彼此的距离保持得恰到好处，住在同一间房子里，活在各自的世界。</p><center>Ⅳ</center><p>但一切在后来迎来了转机，我和若之间，互不干涉的关系平衡，还是被打破了。</p><p>有一天我下班回来，天已经蒙蒙黑了，飘着针眼般的细雨，伴着冷风。我一摸口袋，才发现自己秀逗了，门禁卡和钥匙都不见了。</p><p>恰巧那天，门卫那儿新来了个老头儿，说不认识我，不让我进小区大门。我一个人，孤零零的站在大门外，那个时间段，基本上没人进出小区。</p><p>昏黄的路灯将我的影子拉的老长老长，衣服和头发都淋湿了，那时候我能想到的只有若。她肯定回家了，她每天都比我早下班。</p><p>虽然有点难为情，但我也管不了那么多了。我拿出手机，翻到若的号码，拨了过去。“嘟嘟嘟”地响了三下，那边传来若的声音：“喂，怎么了？”</p><p>“那个，你能不能下来，到大门来一下，我门禁卡和钥匙忘带了。”</p><p>“哦，雨还在下吗？你带伞了没？”</p><p>“嗯，我没带伞。”</p><p>“那好吧，我马上下来。”</p><p>“好，麻烦你了。”</p><p>等了大概五分钟吧，我听见门“吱呀”的一声打开，刚转过去，一把蓝色的小伞撑了过来。</p><p>昏暗的灯光下，显得若的脸更加的白皙，她笑着把伞递给我，说：“你人高，你来打伞。”我的心，当时真的就是有一群小鹿在乱撞，欣喜又惊讶。</p><p>我努力的故作镇定，装出很自然的样子说：“真是谢谢你了！”，她说：“没事，不用客气。”</p><p>伞不大，我们紧紧挨着，那种感觉很美妙，这是这么久以来，第一次跟若这么亲近，我对她的好感也陡然上升。</p><p>我们一路上没有说话，只是相互靠着，慢慢的往前走。她身上有股淡淡的香味，我说不出来那是什么味道，反正闻着很舒服。</p><p>回家后，洗完澡走到若的门口，我轻轻的凑到门边，房里传来一些声音，她应该在看电视剧。我很想睡觉前再看看她，但想想还是算了。钻进自己的被窝，却翻来覆去，实在睡不着，总感觉有未完成的事情，在心里膈应着。</p><p>我胡乱披了件衣服，装作去上厕所，走到若的门前，她还没睡。我听见她在唱歌，声音甜甜的，唱的很好听。直到听她唱完一整首，我才回房间去睡觉。</p><center>Ⅴ</center><p>那一周的周末，我和往常一样，收拾收拾，准备出去打球时，突然传来若的敲门声。我知道，肯定会有一些极好的事情发生，心里一阵狂喜。我飞快的瞄了一眼镜子，然后开门。</p><p><img src="https://upload-images.jianshu.io/upload_images/15342126-6a5981edc3c0f27a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/720" alt="img"></p><p>若那天起的早，以往的周末，她都要睡会儿懒觉。她站在门口，脸上画着淡淡的妆容，头发随意的垂到肩膀，我看着她，觉得她好美。</p><p>我跟她打着招呼：“嗨！有什么事吗？”</p><p>若笑着跟我说：“我去买了一些菜，有一条两斤多重的鲈鱼，还有鸡肉，我一个人吃不完，今晚要不一起在家吃饭。”</p><p>听到若这么说，我激动的心情简直难以言表，但还是努力的保持淡定从容：“好呀，我来给你打下手吧，洗个菜，剥剥蒜啥的。”</p><p>那一顿饭很丰盛，全是若做的。鲈鱼清蒸，淋上酱油，撒上姜丝和葱段；鸡肉和土豆块红烧；还有一大碗蘑菇青菜汤。每个菜都是清清爽爽的，味道适中，就像若的人一样。</p><p>吃完饭，我提出要洗碗，若笑着说好呀，她做饭，我就洗碗嘛。她站在我旁边，我洗完一个碗，她就拿走放回到原位，全程没有一句话。我扭过头看她，她轻轻的抿着嘴唇，把手伸给我，我以为她想让我牵牵手，但我刚碰到她的指尖，她就“噗嗤”的笑了出来说“你都洗了两遍了，可以了，快把碗和盘子递给我”。对呀，我都洗了两遍了，怎么这么傻乎乎的呢？</p><p>此后的时光，就像电视剧里演的那样，一对合租男女，我和若，从最初的保持距离，到逐渐熟悉，亲近，就差我们当中的任何一人，去捅破那一层暧昧。可我还想等等，若也迟迟没有向我表达什么，万一人姑娘没那意思呢。</p><p>从那以后，我们之间话也多了起来，她遇到任何有趣的事都会跟我说，比如隔壁家的大花猫生小宝宝了，李葵在小区里勾搭小母狗了啥的。</p><p>回家后再也不会各自待在房间里，我回的晚的时候，她会在客厅里看电视，我知道她是在等我。</p><p>周末会一起买菜做饭，我也做过几次，但味道不咋样。碰到天气好的时候，我们会带着李葵，到附近的公园遛弯。空闲时，她喜欢宅在家里，看看书，刷刷剧。但也会抽出时间，我打篮球时，她偶尔会跟着来到场边，去买我喜欢的饮料；我们还一起去骑行，有时候沿着三环路，有时候去三道堰的小道，或者去龙泉那边，她骑得慢，总在后面冲我喊着慢点，等等她。</p><p>过年放假，我7天，她10天。回家后，我整天想的都是若的模样，耳旁尽是她的声音。我忍不住打电话给她，拨通后却扭扭捏捏，竟不知该说什么，若笑我说：“傻瓜，新年快乐呀！”</p><p>我们每天都用微信聊天，从早上睁开双眼的“早安”，到睡觉时候的“晚安”，她发了很多照片给我，有她的自拍，有她和亲朋的合影，有她家乡的景色。</p><p>我是人生第一次，盼着年假赶快过去，我迫不及待的想要回去，想回到那个8楼的合租房。我本以为若会晚回来一两天，但打开合租房门后，却听到厨房里一阵“叮叮咚咚”。</p><p>若在往冰箱里放从家带来的腊肉香肠，看到我，她显出很高兴的样子，我没想到她会提前回来，我向她招着手，若说：“晚上要你尝尝我们家的特产”。我指着自己的大箱子，嘿嘿的笑到：“我也带了哦”。</p><p>我们都给对方带了腊肉香肠。</p><center>Ⅵ</center><p>两天后，我约了若出去吃晚饭。那是我第一次看见若喝酒，她只喝了一点，脸上就已经带着红晕。我们吃完走在路上，我不知道若是真的有点醉，还是假装的。她走路轻飘飘的，不时向我身上靠过来，我心里明白，她想让我牵着手或扶着她走。</p><p>我把手伸过去，一把牵住她，那是我第一次牵她的手，暖暖的软软的。我扭头看她时，她也在看着我。</p><p>快到小区时，我想是时候了，管它结果怎样，我都不想再等了。没想到，若突然停了下来，她对我说：“我喜欢你，你喜欢我吗?”</p><p>当时的情况，在我意料之外，但却是再好不过的事情。</p><p>我和若在路灯下，影子被拉得老长老长，我用近乎颤抖的声音回答她：“嗯”。</p><p>那一年是2017，我和若在一起了。</p><p>到18年年初，由于工作关系，我去到了北方，而若留在了成都。我走时，她问我会回来吗？我说会的，会经常回来看你。但，我失信了。</p><center>Ⅶ</center><p>从同居到相隔千里，最初的那些小鹿乱撞，那些甜蜜，逐渐稀释、消失。分开的前几个月，我们仍然会每天聊天，通话。但到下半年，我们开始不那么频繁的联系，直到后来，再也没有互相找过对方。聊天记录栏从置顶，到降落到最底层。我很久没发朋友圈了，若也没有。</p><p>现在是2019年，又快春节了，我打开微信，翻到通讯栏的若，看着她的个人主页，她的头像，我们上一次的聊天记录是7个月前。</p><p>我不知道的是，她是否还住在那个8楼的套2，还是回了重庆，还是去了别的什么地方。</p><p>我知道的是，我这辈子，可能再也不会像2017年的那个夜晚，对着一个女孩说：“我喜欢你，我们在一起吧。”</p><hr><p>作者：最不要面子的鹿</p><p>链接：<a href="https://www.jianshu.com/p/4ff6e5ab3263">https://www.jianshu.com/p/4ff6e5ab3263</a></p>]]></content>
    
    
    <summary type="html">我知道的是，我这辈子，可能再也不会像2017年的那个夜晚，对着一个女孩说：“我喜欢你，我们在一起吧。”</summary>
    
    
    
    
    <category term="分享" scheme="https://hanblog.xyz/tags/%E5%88%86%E4%BA%AB/"/>
    
    <category term="文章" scheme="https://hanblog.xyz/tags/%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>支付系统:整体架构</title>
    <link href="https://hanblog.xyz/posts/45917ab5.html"/>
    <id>https://hanblog.xyz/posts/45917ab5.html</id>
    <published>2019-06-04T02:46:24.000Z</published>
    <updated>2019-06-04T02:46:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="产品架构图"><a href="#产品架构图" class="headerlink" title="产品架构图"></a>产品架构图</h2><p><img src="https://upload-images.jianshu.io/upload_images/5458820-6ece791b857e8f50.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000" alt="架构分析"></p><h2 id="产品层"><a href="#产品层" class="headerlink" title="产品层"></a>产品层</h2><p>通过核心层提供的服务组合起来，对最终用户、商户、运营系统提供服务的系统。</p><p>支付系统的支撑系统、核心系统每家公司的架构都大同小异，而且都是必不可少的模块。而每家公司的支付业务、运营策略各自不同，所以，上面的应用层各自不同。通常我们可以按照使用对象划分为：针对最终用户应用、针对商户应用、针对运营人员应用、针对分控人员应用…</p><p><strong>支付流程图</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/5458820-684a9559e088bf9e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000" alt="img"></p><p><strong>资金流处理</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/5458820-5038ee0a725b1204.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/974" alt="img"></p><h2 id="核心层"><a href="#核心层" class="headerlink" title="核心层"></a>核心层</h2><p>支付系统的核心模块，内部又分为两个部分： 支付核心模块以及支付服务模块</p><h3 id="支付应用"><a href="#支付应用" class="headerlink" title="支付应用"></a>支付应用</h3><p>支付核心层通过支付应用对上册提供服务，用户从这里启动支付流程。</p><h3 id="支付网关"><a href="#支付网关" class="headerlink" title="支付网关"></a>支付网关</h3><p>在支付系统中，支付网关和支付渠道的对接是最核心的功能。其中支付网关是对外提供服务的接口，所有需要渠道支持的资金操作都需要通过网关分发到对应的渠道模块上。一旦定型，后续就很少，也很难调整。而支付渠道模块是接收网关的请求，调用渠道接口执行真正的资金操作。每个渠道的接口，传输方式都不尽相同，所以在这里，支付网关相对于支付渠道模块的作用，类似设计模式中的wrapper，封装各个渠道的差异，对网关呈现统一的接口。而网关的功能是为业务提供通用接口，一些和渠道交互的公共操作，也会放置到网关中</p><p>支付网关工作流程:</p><ul><li>商户侧应用发起支付请求。注意，这个请求一般是从服务器端发起的。比如用户在手机端提交“立即支付”按钮后，商户的服务器端会先生成订单，然后请求支付网关执行支付</li><li>支付请求被发送到支付（API)网关上。网关对这个请求进行一些通用的处理，比如QPS控制、验签等，然后根据支付请求的场景（网银、快捷、外卡等），调用对应的支付产品</li><li>支付产品对用户请求进行预处理，包括执行参数校验、根据支付路由寻找合适的支付通道、评估交易风险、生成订单、调用通道落地执行支付、响应通道的结果并将交易结果通知到商户侧</li><li>支付产品调用支付通道执行支付。这个请求并不是直接落地到通道上，而是通过支付通道前置来封装，由支付通道前置来完成和通道的交付。 支付产品是按照可以提供的支付服务来设计的</li><li>支付通道前置，（以下在不引起混淆的情况下，都简称支付通道）负责和支付通道之间的通讯，调用支付通道接口完成最终的支付操作数</li></ul><p><strong>设计原则</strong><br> 如上所述，支付网关、支付产品和支付渠道的职责分工为：</p><ul><li>按照支付能力来划分支付产品。</li><li>同一支付能力的公共支付流程，在支付产品中实现。 支付产品提供的是和渠道无关的、和支付能力流程相关的功能。</li><li>在各支付产品中，其和支付能力无关的公共功能，在支付网关上实现。</li></ul><p>按照这个分工，在支付网关上实现的主要功能：</p><ul><li>API路由。在聚合支付场景下，当有多个支付产品可以提供支持时，使用支付网关可以让接入方对接时无需考虑支付产品的部署问题。</li><li>接口安全： 熔断、限流与隔离。 这对支付服务来说尤为重要。 这是微服务架构的基本功能，本文不做描述。</li></ul><p>如下功能，是在支付产品中提供：</p><ul><li>风控拦截： 风控是和支付产品有关，不同产品的风控措施、处理对策也是不同的，所以风控是在产品层实现。</li><li>支付路由： 路由也是和产品有关。不同产品路由策略也不同。</li><li>参数校验： 这也是和支付产品相关的，不同的产品接口其参数也不同。</li><li>支付流程： 生成交易记录、落地渠道执行支付、同步和异步通知等操作。</li></ul><p>如下功能，可以在产品层或者网关层实现：</p><ul><li>身份验证： 确认付款方、收款方、渠道是否有执行当前操作的权限。 在那一层实现取决于这些信息是否有提炼为公共行为。</li><li>验签： 对接口参数进行签名并验证其签名。这是为了避免接口被盗刷和篡改的必要手段。如果对各个接口采用统一的签名规则，则可以在网关层实现。</li></ul><h3 id="支付产品"><a href="#支付产品" class="headerlink" title="支付产品"></a>支付产品</h3><p>在不同的公司由于接入渠道和应用的差异，对支付产品分类略有不同。支付产品是由支付系统对支付渠道进行封装而对业务方提供的支付能力。</p><ul><li>快捷支付<br> 用户在完成绑卡之后，在支付的时候，不需要再输入卡或者身份信息，仅需要输入支付密码就可以完成支付。对于小额度的支付，甚至可以开通小额免密，直接完成支付。 这种支付方式不会打断用户的体验，是目前主要的在线支付方式。一般快捷支付产品是通过封装银行或者第三方支付平台提供的快捷支付接口或者代付接口来实现的。</li><li>网银支付<br> 用户在支付的时候，需要跳转到银行网银页面来完成支付。在网银页面，需要输入用户的卡号和身份信息。这种支付方式会中断用户当前的体验，一般仅用于 PC Web 上的支付。 网银支付是封装银行提供的网银支付来实现。</li><li>账户支付<br> 也称为余额支付、零钱支付等。 指为用户建立本地账户， 支持充值，之后可以使用这个账户来完成支付。</li></ul><h3 id="支付路由"><a href="#支付路由" class="headerlink" title="支付路由"></a>支付路由</h3><p>用户在前端选择一种支付方式，比如使用招行借记卡来支付后，系统不一定就是调用招行的接口来执行支付。支付宝、百付宝等第三方支付平台以及银联等，都支持招行借记卡支付。 这种将支付方式落地到具体的支付接口的模块，就是支付路由。</p><p>支付路由在支付系统中的核心作用，除了本职工作路由外，还承担如下职责：</p><ul><li>省钱，省钱，省钱，这是支付路由选择支付通道的最主要的规则。 哪个通道省钱，基本会优先考虑这个通道。</li><li>提升支付产品的QOS。这体现在系统的可靠性、稳定性、性能和可用性上。通过屏蔽掉无法连接、不稳定、性能低的通道来提升这些指标。</li><li>支持营销。通过优先选择有优惠活动的通道，可以帮助业务提升付费客户量。</li><li>降低运营成本。一个设计良好的支付路由，可以大大降低运营投入。</li></ul><p><strong>架构图</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/5458820-50052dc65b270d85.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000" alt="img"></p><h3 id="支付渠道"><a href="#支付渠道" class="headerlink" title="支付渠道"></a>支付渠道</h3><p>包括银行渠道和第三方支付（微信、支付宝、通联、易宝）渠道</p><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><p>包括对用户、商户的实名身份、基本信息、协议的管理</p><h3 id="资金管理"><a href="#资金管理" class="headerlink" title="资金管理"></a>资金管理</h3><p>管理公司在各个支付渠道的头寸，在余额不足时进行打款。 对第三方支付公司，还需要对备付金进行管理</p><h3 id="清算分润"><a href="#清算分润" class="headerlink" title="清算分润"></a>清算分润</h3><p>对于有分润需求的业务，还需要提供清分清算、对账处理和计费分润功能</p><h3 id="会计财务"><a href="#会计财务" class="headerlink" title="会计财务"></a>会计财务</h3><p>提供会计科目、内部账务、试算平衡、日切、流水登记、核算和归档的功能</p><h3 id="核算"><a href="#核算" class="headerlink" title="核算"></a>核算</h3><h3 id="账户账务"><a href="#账户账务" class="headerlink" title="账户账务"></a>账户账务</h3><p>管理账户信息以及交易流水、记账凭证等。这里的账务一般指对接线上系统的账务，采用单边账的记账方式。 内部账记录在会计核算系统中</p><h3 id="风控"><a href="#风控" class="headerlink" title="风控"></a>风控</h3><p>风控包括，账户风险、交易风险、资金风险、套现风险、操作风险、合规风险、洗钱风险，每一块都是一个课题。</p><h2 id="基础层"><a href="#基础层" class="headerlink" title="基础层"></a>基础层</h2><p>用来支持核心系统的基础软件包和基础设施， 包括运维监控系统、日志分析系统等</p><ul><li>运维监控<br> 支付系统运行的基础设施受到外界的干扰（压力、bug、掉电、黑客攻击…）造成系统不稳定，需要能够被及时响应，这就需要一个运维监控系统来协助完成。</li><li>日志分析<br> 日志是支付系统统计分析、运维监控的重要依据。需要提供基础设施来支持日志统一收集和分析</li><li>短信平台<br> 短信在支付系统中有重要作用： 身份验证、安全登录、找回密码、以及报警监控，都需要短信的支持</li><li>实时计算</li><li>全文检索</li><li>数据存储</li></ul><hr><p>作者：码道城攻</p><p>链接：<a href="https://www.jianshu.com/p/c58dd6886298">https://www.jianshu.com/p/c58dd6886298</a></p>]]></content>
    
    
    <summary type="html">支付系统的支撑系统、核心系统每家公司的架构都大同小异，而且都是必不可少的模块。</summary>
    
    
    
    
    <category term="架构分析" scheme="https://hanblog.xyz/tags/%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>你多走了弯路,才看到更多的风景</title>
    <link href="https://hanblog.xyz/posts/b58bc8.html"/>
    <id>https://hanblog.xyz/posts/b58bc8.html</id>
    <published>2019-04-24T09:27:40.000Z</published>
    <updated>2019-04-24T09:27:40.000Z</updated>
    
    <content type="html"><![CDATA[<center>I<center>我有一个漂亮朋友林小然，她是个话剧演员，每当我这样介绍，她都会格外强调，要在前面加上三个字哟——`三流的`。<p>可她不知道，我总是以她为傲。每当我失意或沮丧时，她都会跑过来，以自己独特的方式来安慰我。有时，只需她一句话或一个拥抱，我就能恍然大悟。</p><p>我常常想，幸好世界拥有如此坚强而温暖的人，不然即使日日暖阳，我也感受不到力量。</p><p>可是，人人都有脆弱的时候。我一直觉得世界上最孤独的人，莫过于时常可以给别人信心，却无法安慰自己。而这些生而骄傲的人，却总能以独特的方式自救，让你误以为他们格外幸运。</p><blockquote><p>你多走了弯路，才看到更多风景</p></blockquote><center>II<center>我在雁荡山出差时，手机信号不好，直到走出那座山，我才接到了林小然的电话。<p>“我给你打了几十个电话，想告诉你我发生了两件比较不幸的事，你想先听哪件？”</p><p>“先说不幸的，再说最不幸的，还能让我缓缓。”</p><p>“我男朋友爱上了其他姑娘，我被分手了。”</p><p>“真是禽兽不如，不值得咱哭，难道还有比这更不幸的吗？”</p><p>“我演出排练时，有一个动作是在一棵假树上跳舞，我分神了，假树也倒了，我直接摔了下来，现在床上躺着… …导演说，让我好好休息一段时间，他给我放长假。”</p><p>我风尘仆仆地赶到医院，看到病床上脸色苍白的林小然，却不能说出一句话来安慰她。她笑着说自己完全不需要安慰，此时，十万火急的事情是让我推着她去排练场地。</p><p>我只好推着任性的林小然走到排练场，所有人见了她都很吃惊，也很惊喜。</p><p>导演正在重新选角色替代她，望着一个个漂亮的女孩犹如燕子轻盈地一跃而过，那一瞬间，我的漂亮朋友林小然的眼神闪过一丝失落，但她很快掩饰了自己的情绪。她默默地坐在排练室的角落里，安静地看着舞台上的他们投入剧情、倾情演出。那眼神中满是羡慕，还有坚强。往下几个星期，林小然仔细地分析话剧中每一个角色，每一句台词，除此，她还开始写自己对某个角色的理解，写好之后，还会拿给导演看。</p><p>我以为是她还想夺回那个本属于自己的角色，曾劝她：</p><blockquote><p>不如好好休息吧，请允许自己偶尔虚度年华，也是一种活法。</p></blockquote><p>林小然说：</p><blockquote><p>或许，这个世界上很多东西就像不再爱你的男人，是抢不来的。我以前总想着在舞台上光鲜亮丽地展示自己，却从未沉淀下来感受内心戏。这段时间，是上天安排给我的思考的机会吧！</p></blockquote><p>可是，直到最后，生活并没有给她带来任何惊喜。虽然大家都赞美林小然的坚强，却把更多的掌声献给了替代她角色的女孩，导演也没有如我期待那般，邀请林小然出演下场话剧，哪怕是再给她一次机会，一起合作新的剧本… …</p><p>于是，热闹散去，灯光暗淡，舞台上一片寂静。原来，快乐是别人的，她什么都没有。</p><p>你有经历过那种感觉吧？明明是你和一群人一起走向远方，不是自己不努力，并非他人太聪慧，或者只是一点小小的意外，你就莫名掉了队，成为了一个可悲的局外人。</p><p>二十九的林小然始终没想到她是以这种方式告别了话剧舞台，她带着那条伤腿走在大街上，调侃道，她走路看上去瘸吗？不是本命年运气才会差吗？明年才三十而立吧？我现在都立不起来了！</p><p>终于，林小然泪流满面。</p><p>我本以为这次会要了她半条命，她至少会一个月缓不过来。许久，她擦干眼泪对我说，她要考研，我并没有在意，以为她只是咽不下这口气，过段时间就忘了。</p><center>III<center>之后，林小然报了一个考研班，英语不好，她学起了日语，浩浩荡荡地开始了自己的“考研”长征。好久以来，她房间的灯昼夜通明，她分秒必争，学得特忘我，不食人间烟火… …<p>看着如此沉浸的林小然，我从不敢想象，一年后的她并没有考上。这次她真的是陷入了两难的困境，她看了看银行存款，取到无法取出那固执的九十八块钱，选择默默放弃了再来一年的豪言壮语。</p><p>这次，她却没有我想象中失落。</p><p>她说，考研时，自己每天早晨都会去公园跑步，认识了一个同样爱跑步的男人，那时，他刚刚失恋，跑步只是为了发泄。坚持许久，他才明白若最初只是释放一种情绪，现在真是爱上了这项运动。而她在复习的过程才懂得，学习本身的意义，远大于结果… …</p><p>随着时光的流逝，或许所有存在的东西都会消失，若最初，我们是奔着一个方向而往，最终，却很有可能会寻觅到了另外一种存在，也并非是忘记初心，而是时光早已赋予它不同的使命。</p><p>前行的过程，我们并不知道前方会有怎样的惊喜，生活会给我们答案，也不会立刻告诉我们一切。</p><p>就在林小然打算离开这个城市，换一种生活方式的时候，突然来了一个录取通知书，原来是一个名导的剧组需要一个日语的导演助理，他们综合考核后，觉得此职位非林小然莫属，望她速速加入，刻不容缓。</p><p>一瞬间，林小然兴奋的尖叫穿越了时空，我好像回到了一年前，她还是那个沮丧的姑娘，哭丧着脸，抱着两个悲伤的段子，等待我来安慰。</p><p>此时，没有拥抱，没有庆祝，只有被认可的快乐。兜兜转转之后，又回到了比起点更高的起点。若中间有落差，也不过是最常见不过的抛物线，以为到达的终点，或许不过是另一个起点。</p><blockquote><p>因多走了弯路，才看到了更多风景，因曾爱错了人，才更心疼爱自己的人。上天的馈赠，不是要收回幸福，而只是想考验你拥有的所有的忠诚度。</p></blockquote><p>我们唯一能做的，不过是<code>比往日更精彩</code>。除此，还要有点<code>耐心</code>，来等待。</p>]]></content>
    
    
    <summary type="html">因多走了弯路，才看到了更多风景，因曾爱错了人，才更心疼爱自己的人。上天的馈赠，不是要收回幸福，而只是想考验你拥有的所有的忠诚度。</summary>
    
    
    
    
    <category term="分享" scheme="https://hanblog.xyz/tags/%E5%88%86%E4%BA%AB/"/>
    
    <category term="文章" scheme="https://hanblog.xyz/tags/%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>黑尾酱深陷舆论风波的背后</title>
    <link href="https://hanblog.xyz/posts/579d1af7.html"/>
    <id>https://hanblog.xyz/posts/579d1af7.html</id>
    <published>2019-04-13T00:29:08.000Z</published>
    <updated>2019-04-13T00:29:08.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/10837314-49902247630b1ab0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000" alt="img"></p><p>图片发自简书App</p><p><img src="https://upload-images.jianshu.io/upload_images/10837314-accf6fb16c1c85bd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000" alt="img"></p><p>图片发自简书App</p><p><img src="https://upload-images.jianshu.io/upload_images/10837314-bf8c1229965619e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/496" alt="img"></p><p>图片发自简书App</p><p>前不久黑尾酱在社交网站晒出如此性感的照片之后，所有的网友疯狂的吃瓜，在一边看笑话不怕事大，纷纷留言李诞。</p><p>网友如此感兴趣莫过于那个一向以甜美亮相的青春雨女，如今爆出如此性感妖娆照片。</p><p><img src="https://upload-images.jianshu.io/upload_images/10837314-fec356f19e6b2057.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000" alt="img"></p><p>图片发自简书App</p><p>平常如此文静安好的玉女为何如此发生这样的变化，不少网友也是纷纷猜测留言。</p><p>公说公有理，婆说婆有理。</p><p>前不久，李诞因一段视频而深陷出“轨门”，这是不是真的，其实任何人都无法知晓，所有人的猜测也不过是自己的一厢情愿。</p><p>事件起因是一个网友偶遇网红李诞，因其好奇心过重而拍摄的一段视频。</p><p>11月24日晚，有网友曝出一段疑似李诞在望京某酒吧的视频。视频中，疑似李诞的男子与一年轻女子举止亲密，疑似正在接吻。</p><p><img src="https://upload-images.jianshu.io/upload_images/10837314-a53a053b56b0ac8b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/302" alt="img"></p><p>图片发自简书App</p><p>可是有多少网友注意啊</p><p><strong>“疑似”</strong></p><p>我们的网友吐沫星子乱飞，一时间李诞“出轨”冲上热搜。</p><p>之后事情的结果如何呢</p><p>随后有媒体联系到了李诞工作人员，对方称视频中的男子确实是李诞，但是李诞与那名女子并不是在亲吻，两人只是在讲话而已，同时该工作人员称将会发布澄清说明，直至爆料者是想炒作。</p><p>事件中的女主人公也出来说话了，就算她不说话，你说她能逃脱我们的“人肉搜索”吗</p><p>据悉该名女子ID名叫张浴盐，资料显示毕业于中央美术学院，是一名艺术家与音乐人。张浴盐发文回应，视频中的女子确实是她，但是看到这样的爆料后感觉满满的疑问，两人只是在讲话而已，这也太能瞎编了。</p><p><img src="https://upload-images.jianshu.io/upload_images/10837314-241fb7b4e285ef5e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="img"></p><p>图片发自简书App</p><p>不死心的网友感到失望，不知道那些失望的如何想的？</p><p>如今的我们判断一件抒情，男性思维的理性化呢？</p><p>大家都知道这是一个碎片化的时代，我们每个人的生活都被现代的科技工具打乱，可是我们的大脑的思维的逻辑性和连贯性以及最基本的判断能力应该满足，请诸位听我分析一下啊！</p><p>一个网友在一个无聊的瞬间，突然发现了一个像明星的人在公开场合搂搂抱抱，另外一点，这可是在天黑啊，可是一瞬间自己的“青春荷尔蒙”涌至大脑，于是自己拿着自己的手机进行了录制，一键发送网络，可是这到底是不是明星啊？</p><p>其实我们也不知道。</p><p><strong>我们以为知道了事件的全部，可能我们一无所知。</strong></p><p>网友的一段短视频根本代表不了什么？因为这只是一个片段而已，就像很多人见了一面之后，就对某一个人匆匆下结论一模一样，这根本就是自己的逻辑。</p><p>今天的黑尾酱突然上热搜是因为什么啊？</p><p>首先是李诞的名气，二是自己打破了自己的甜美外表，大家都知道黑尾酱有一个淘宝店铺，店铺的模特就是李诞和她两个人，平常在自己的店铺发出两个人试穿衣服的照片。黑尾酱平常的微博也都是发一些风景、美食、自拍照一类的照片。根本就是一个享受生活的主。</p><p><img src="https://upload-images.jianshu.io/upload_images/10837314-4bdf90a25684fba9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000" alt="img"></p><p>图片发自简书App</p><p>大家有所不知的是，黑尾酱真名陈典，四川人，曾经和徐璐、杨洋、最美网红夏夏都是军艺的同学，更是被号称军营之花。可是长相出众的她并没有选择去当一名明星。</p><p>这说明人家压根就不想出名。现在的女孩那个不喜欢出名，可是她早已经在央视出名，而且多次在学校担任领舞。</p><p>这按理说，自己的人生一番风顺，自己就应该去娱乐圈啊，可是大家都知道的结果是没有。</p><p>那这次又有网友不甘心，纷纷评论黑尾酱模仿晚晚。</p><p><img src="https://upload-images.jianshu.io/upload_images/10837314-58a5ad9c23521d99.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000" alt="img"></p><p>图片发自简书App</p><p>可是，真的是这样吗？</p><p>难道，人家黑尾酱没有自己的一点自由权吗？别人发什么是别人的自由。</p><p>可是我们也应该警惕一点的是，如果一个公众人不注意自己的言行举止，那么自己也不起自己的影响和号召力。</p><p>在一次买衣服直播中，李诞公开表示“不买衣服的都是“垃圾”，竟然我看一些文章还分析因为李诞是说脱口秀的，可能是自己的开玩笑。我决不能相信这种说法。</p><p>世界上几乎没有那几个国家像中国这样溺爱明星，甚至明星因为拍戏受伤都发微博引来一大帮粉丝的赞扬，可是我们难道不应该理性的想一想这难道不是他们自己的本职工作吗？试想一下“富士康跳楼事件的惨烈”、“煤与瓦斯突出事故”哪一个不值得关注。</p><p>当然我们的娱乐圈也不尽然这样。</p><p>李连杰，他创立了一个专门服务于重大灾难事故的慈善项目，“壹基金”。</p><p>比如，王菲一家，创立了嫣然基金会，为全国各地上千个唇腭裂儿童提供了免费手术。</p><p>前不久，翟天临论文风波，若没有细心网友，我们哪能了解真相的残酷，高校监管的漏洞。</p><p>理性思考，价值判断，方是正道。</p><hr><p>作者：杨明龙</p><p>链接：<a href="https://www.jianshu.com/p/be9e53f6ac05">https://www.jianshu.com/p/be9e53f6ac05</a></p><p>来源：简书</p>]]></content>
    
    
    <summary type="html">我们以为知道了事件的全部，可能我们一无所知。</summary>
    
    
    
    
    <category term="分享" scheme="https://hanblog.xyz/tags/%E5%88%86%E4%BA%AB/"/>
    
    <category term="文章" scheme="https://hanblog.xyz/tags/%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>如果可以重新来过，我还会选择爱你</title>
    <link href="https://hanblog.xyz/posts/64de9f71.html"/>
    <id>https://hanblog.xyz/posts/64de9f71.html</id>
    <published>2019-04-10T04:42:14.000Z</published>
    <updated>2019-04-10T04:42:14.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/9305062-946425139b48876b.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/860" alt="img"></p><p>图片来自网络</p><p>一个号码出现在手机上，归属地既熟悉又陌生，我知道是她。</p><p>01</p><p>夏天的雨总是让人猝不及防，到了吃饭的点突然下起了大雨，教学楼门口站满了没有带伞的人。我看到这种情景，心里说不出的高兴，不住的称赞自己明智的选择，舍友鄙视的眼神才让我收敛几分。</p><p><strong>我挤过等待的人群，准备想英雄一样得到崇拜的目光。可只怪在人群中多看了你一眼，让我从英雄变成了狗熊。</strong></p><p>就在撑伞的前一秒，余光一扫，我看到了站在最外围的一个小女生。个子不是很高，当时觉得只有一米六，长长的头发烫着大波浪，鹅蛋脸上排列着精致的五官，白色凉鞋配上碎花裙有种小清新的感觉。</p><p>脸上布满了愁容，上牙咬着下嘴唇，不停地挪动着小碎步。</p><p>在这一刹那，我和你四目相对，它就像电流一样打通了我的任督二脉，也让我思维紊乱。当时不知是不是被魔力操控，我直接把伞塞到了你的手上，然后自己跑进了大雨中。</p><p>跑了半程的我醒了过来，“脑子是不是被驴踢了。”骂完自己心里还特别高兴。</p><p>狗熊最终变成了落汤鸡，衣服拧出的水洗澡都足够。换上衣服对着镜子整理着头发，傻傻的笑了起来，美曰:“被自己蠢得。”</p><p>舍友一推门看到此时的我，不住的嘲讽。我则极力保持镇定，不能丢了面子。</p><p>“<strong>小伙行啊，英雄救美女于大雨之中。”</strong></p><p><strong>“那当然，路见不平，必当拔伞相助。”</strong></p><p>“快说，那女生是谁？”他们的好奇心向我发难。</p><p>我说不知道，他们不信，不认识就送伞，然后自己淋的像狗一样？在他们的逼迫之下，我只好说出自己当时的想法。这让他们像傻子一样狂笑不止，自此成为了他们的梗。</p><p>健身跑步没有白练，大雨的洗礼并没有让我感冒，只是让我成了笑话，以后的每一天舍友的笑点都是我。</p><p>“怎么像小飞一样傻。”舍友对另一个打游戏不想脑子的舍友说，然后又是一阵狂笑。小飞是我的昵称。</p><p>看到我坐在床上若有所思，舍友走到我面前说:“那个女生挺漂亮的，你要是能一个月追上，我请你吃饭。”</p><p>我给了他一个白眼，淡淡的回了他一句“好”，我想赢，但却连能不能再遇上都不知道。</p><p>之后的每一次从教学楼走过，我都会撇上一眼，可她始终没有出现。半个月过去了，我照例还是宿舍的笑点，不过像我脸皮这么厚的人并不在意。我更在意的是你。</p><p>舍友总是阴魂不散的提醒着我，要不是打不过他，我想这时他坟头的草已经两米多了。</p><p>上帝用事实告诉我们，有缘总会相见。中午和损舍友去餐厅吃饭，正在排队的我被舍友狠狠打了一下，指了指前面。</p><p>准备还回来的我，怒气瞬间消失，我看到你正在窗口给学生打饭，曼妙的身姿在餐厅服装下轻轻舞动。轮到我时却突然想逃，想想真是太怂。你看到我时微微一笑，在菜里多加了几块肉，然后轻声细语般的对我说:“你吃完饭不要走，等会把伞还给你。”</p><p>我可以认真的说，我从来没有听过如此好听的声音。不知所措的我只是点了点头。</p><p>我坐的餐桌正好对着你的窗口，哪里还有心思吃饭，吃一口向那个窗口望一眼，你也时而向我撇上一眼。可就在那一次抬头，你不见了，变成了你旁边的阿姨。我像失去了宝贝似的四处张望，一旁幸灾乐祸的舍友阴阳怪气的说:“别找了，肯定有为了躲你跑掉了。”</p><p>我不理他，他那是嫉妒。</p><p>“你好，谢谢你的伞。”甜美的声音从我身后传来，说着把伞递给我。</p><p>“不用客气。”</p><p>“那天你淋着雨跑出去没事吧。”语气里透漏着关心，不管怎样，我觉得是这样。</p><p>“<strong>他身体强壮的很，天天跑步健身，牛感冒他都不会。”舍友接着说。</strong></p><p>我狠狠地瞪了他一眼，识趣的他灰溜溜的走开了。“他那是嫉妒，担心请我吃饭。”</p><p>“就像今天一样，中午我都会来餐厅勤工俭学，那天也是，可我没有料到夏天的雨就像翻页的书。”</p><p>“应该说就像女人的心情，说变就变。”我没敢说出来，只是在心里想了想。</p><p>我们互加了微信，然后她从包里掏出一包东西，紧接着快速的跑开了，背影消失在拐角处，我看向这个神秘的礼物，就那样静静地看着，像看着你一样。</p><p>这天之后，我都会有意无意的找她聊天，她也很乐意分享她的事情。看到时常对着屏幕微笑的我，舍友无奈的说:“这小伙走火入魔了，不过再不抓紧，可真要请我吃饭了。”</p><p>距离打赌的期限越来越近，虽然也取得了一些进展，不过那层窗户纸还没有捅破。几天后我才知道不是窗户纸，而是一座山。</p><p><strong>赌期将至，在舍友的明朝暗讽之下，我做出人生的一个重大决定——表白。</strong></p><p>战战兢兢编辑修改好文字，大拇指一次次定格在确认上方。看着外边的蓝天白云，晴空万里，深吸一口气，手指轻轻一点，信息已发送。</p><p>时间一分一秒的过去，手机一遍一遍的点开，任何消息都没有。</p><p>“走吧，等什么呢，我要去吃自助大餐。”舍友拽着我往外走。</p><p>再一次打开微信，已经两天没有消息。或许太突然了吧，或许她并没有这个想法。合上手机，快步赶上舍友。</p><p>他那天吃的一包劲，真的是爬着进去，扶着墙出来。而我就呆呆的看着他，没有一点食欲。</p><p>“被女生拒绝很正常，像我，从来没有成功过。”他用他的实际经历安慰我。</p><p>我被他这么一说逗笑了，吃，把烦恼吃紧肚子里，然后再在某个地方排出体外，不再相遇。</p><p><img src="https://upload-images.jianshu.io/upload_images/9305062-9dd612540cfb72c2.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000" alt="img"></p><p>图片来自网络</p><p>02</p><p>迷迷糊糊被电话吵醒，闭着眼睛开始说话:“喂”。听到声音立刻精神抖擞，是你打过来的。心里还埋怨呢，嘴里却温柔的说:“怎么了，这么早打电话过来？”</p><p>“是不是打扰到你睡觉了？”</p><p>“没有没有，早就起了。”</p><p>“那一起到第二餐厅吃个早饭吧。”</p><p>好后悔说自己起床，在心里狠狠地抽了自己两个大嘴巴子。抽是抽，抽完异常的开心，坚信这是答应我表白的证明。</p><p>我可以这么说，这天早上是有史以来起床最快，并且收拾的最完美的一次。洗脸刷牙洗头一气呵成，如行云流水般顺畅。</p><p><strong>今天的她格外漂亮，扎着高高的马尾，精致的五官暴露无遗。粉红色的T恤搭配牛仔短裤，脚下一双白色帆布鞋，就像一个自带光芒的公主，不免让人心生别的想法。</strong></p><p>面对面坐下后空气变得安静起来。“我发的信息你看到了？”我明显气势不足的问道。</p><p>“看到了，就凭你几句话我会答应你吗，不可能。”语气里带着骄横。</p><p>还没等我回答，“除非你有所表示，我可以考虑一下。”说完她脸上泛起两朵红晕，随即憨笑起来。</p><p>我知道你已经接受了我，不过需要一个更正式的场合。“那晚上“烤鱼鲜”见。”我故意装作镇定，心里已经乐开了花。</p><p>你最爱吃鱼，我们之后也吃过很多，而这一次我终生难忘。</p><p>吃烤鱼时你总喜欢吃带骨头的鱼肉，我问你，你说靠近骨头有营养。另外你还有另一个目的，就是和我比谁吃的多，指着那堆骨头看着我，炫耀着自己的杰作。</p><p>饭桌上我没有向你表白，不知道你是不是有些失落。我相信你是失落的，不然之后你怎么会感动的流泪。</p><p>回学校的路上我故意带你绕了一圈，灯光闪烁的表演吸引了你的注意。我趁你目光聚集时，从你身旁悄悄溜走，直到我出现在舞台上你才发现我的不存在。</p><p>我眼睛注视着你，虽然距离远看不清你的眼睛，我知道你肯定也是。我从很早之前就知道今天有表演，并且组织人还是我的好朋友，当你早上说完那句话时，我心中的如意算盘就已经打好了。</p><p>“今天我想把一首歌送给一个女孩，希望她能够喜欢。”接下来我唱了一首张杰的《看月亮爬上来》。</p><p>“从看到你的第一眼，我知道你就是我心中的那个人，做我女朋友吧，好不好？”我在舞台上对你说。</p><p><strong>你明显有些激动，慢慢地向我靠近，眼中晶莹的宝石闪闪发亮。走上舞台抢过我的话筒，轻轻的说了一句:“我愿意。”</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/9305062-cee0ea7b0980a65a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/567" alt="img"></p><p>图片来自网络</p><p>03</p><p>就这样我撩到了你，你成为了我的女朋友。那一晚，我把初吻献给了你，轻轻的靠近你的额头，感受你的温度，现在想起依然记忆犹新。</p><p>有来有往，你也给我回了一个，感觉有点吃亏，你不是第一次。不过没关系，只要真心相爱，又有谁在意是不是第一次呢。</p><p>送你回去后，心中突然冒出奇怪的想法:“为什么不早点告诉我呢，不然他就要请我吃饭了，不对，是请我们。”出现这个想法心中有欠打的错觉。</p><p>一起吃饭、散步、上晚自习，热恋期的我们一刻也不想分开。就算分开，也互相分享发生的故事，心情就像邓丽君歌里唱到的，“甜蜜蜜”。这时的你在我眼中不止是温柔，更多了些可爱，有时还会变成一个小泼妇。</p><p>我改变着我的脾气，只有你训我，没有我训你。你生气时总能用我的幽默把你逗笑，<strong>然后我就会引用王小波的经典语录:“好看的皮囊千篇一律，有趣的灵魂万里挑一，像我这么有趣的人，你可得珍惜。”</strong></p><p>你在我身上乱打一通，发泄完脾气最后总要亲我一下，这就是传说中的“打一下给一块糖吃”吧。</p><p>以前看过这样一幅漫画，两个男生斗牛（打篮球solo），其中一个把另一个虐的不忍直视，然后用鄙视的眼神看着对手，一副趾高气昂的样子。结果旁边传来一个漂亮妹妹的声音。</p><p>“你是最棒的，爱你哦。”对着被虐的男生喊到。</p><p>心中的傲气顿时魂飞魄散，球技再好有用吗？没有女朋友。</p><p>没有你之前这说的就是我，不过现在好了，身边有了你。</p><p>那是一次校级篮球比赛，我们系院历史首次进入总决赛，而我们的对手，去年卫冕冠军。这一次你站在场边为我加油，我是替补控卫。这是一场艰难的比赛，半场过后已落后15分。在对方的防守之下，我连着投丢三球，甚是失落，就像被霜打过的茄子。</p><p>中场休息你跑过来为我加油，给了我一个篮球式的拥抱，我知道，我需要用更好的表现来证明自己。</p><p>易边再战，我们重新焕发出激昂的斗志，替补出场的我像开了挂一般，说“篮筐如大海”也不为过。防守在我面前形同虚设，随着飙进的三分，成功追平比分。</p><p>你站在那里，不住地给我加油，身体里爆发出洪荒之力。这场比赛最终通过加时获得了冠军，我成为了英雄，跑过来的你说奖励我一下，踮起脚尖亲了我一口，还说有点咸，你的眼睛却笑成了月牙。</p><p><strong>要知道，你是我真正的英雄。</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/9305062-68411b92a51f645f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000" alt="img"></p><p>图片来自网络</p><p>04</p><p><strong>我们经常讨论未来，想象着结婚后的样子，要生两个孩子，一男一女，凑成一个好字，最好是龙凤胎，这样就少受一份罪。</strong></p><p>美好的时光在不经意间流逝，握得越紧，流的越快。</p><p>你开始毕业实习，去了外地，至此开启异地恋生涯。走的那天，你哭着对我说:“一定要每天给我打电话，不然我会很孤独。”我点头答应，那天你三步一回头。</p><p>你每天下班之后，我都会送去我的问候，你给我讲工作的故事，我给你讲考研的趣闻。忘了说我这时正式开启了考研之旅。她说工作虽然很累，但能学到不少东西。有时也会生气难过抱怨，我安慰你说等我过去照顾你，考研报考的学校在你的城市。</p><p>你和你的领导吵了一架，在电话里嚎啕大哭，我像往常一样安慰你，<strong>你却朝我喊:“说这些话顶个屁用。”我第一次体会到异地恋的无奈。</strong></p><p>这样的事情发生过好几次，每次我都会去看你。有一次你回来看我，给我亲手织的围巾，你说:“围着围巾就能感受到你的温暖。”</p><p>我感动极了。</p><p><strong>都说“距离产生美”，可加上时间的跨度，就变成了伤。</strong></p><p>天空蒙上了一层阴霾，秋风无情的抽打着发黄的树叶，有点不吹掉不罢休的感觉，可这并不能影响到我的好心情。</p><p>你在哪里，怎么找不到你了？QQ分组中的唯一不见了，连着打了几个电话也没有回应。心里忐忑不安，脑海里不断浮现不好的事情。“不会的，应该在上班。”“不会啊，这个点应该下班了。”魂不守舍的回到了宿舍。</p><p>躺在床上翻来覆去睡不着，直到几个小时后，铃声响起，是你的电话，我就说没事嘛。如果说刚才还是魂不守舍，那接通后直接魂飞魄散。</p><p>伴随着哭声从你的嘴里慢吞吞的吐出几个字**:“我们……分～手吧。”**</p><p>开玩笑，这肯定是在骗我，我怎么能相信呢，以为我是智障啊</p><p>我问她原因，得到的结果是“我们不合适，身高不合适，你太矮了。”</p><p>说你身高是160cm太委屈你了，准确的说是168cm，我比你高5公分，在一起时你很少穿高跟鞋，我知道你是怕给我造成压力。</p><p>并没有说很多，你就挂掉了电话，再打过去传来熟悉的声音“你拨打的电话是空号”，微信QQ也已不再是好友。</p><p>我不相信，因为这个破理由你会丢下我，我一直坚信你是遇到了什么事情。可我等到第二天还是没有你的回信。</p><p>我不能再等了，买上车票，却没有找到你。你换了住的地方，公司也一直说今天你不上班。一周后我只能原路返回。</p><p>不知道在没有我的日子里，你过得是否快乐。</p><p>不久之后，我在朋友那里知道，你重新找到了另一半。我彻夜不眠，吸烟如烧火，喝酒如流水，还算我坚强，挺过来了。</p><p>后来我知道，他没有我帅，一样没有钱，为什么你会选择他，因为你需要陪伴，而我做不到。同时也不明白，为什么你不能再等一等，等我照顾你。</p><p><strong>我没有去你的城市，在最后改了我的志愿，去了另一座城市，开始全新的生活。过了很久的某一天，你从我心底离开了。我不知道是我原谅了你，还是世界原谅了我，也或许是我原谅了自己。</strong></p><p>手机还在震动，在片刻犹豫后，我按下了接听键。电话那边传来熟悉的声音:“先生，您炒股吗？”</p><p>我听到之后哭笑不得，抬头望天空，它还是依旧湛蓝，<strong>如果再重来一次，我还会选择爱你。</strong></p><hr><p>作者：我的绰号奥特曼</p><p>链接：<a href="https://www.jianshu.com/p/a987358ea5ea">https://www.jianshu.com/p/a987358ea5ea</a></p><p>来源：简书</p>]]></content>
    
    
    <summary type="html">我挤过等待的人群，准备想英雄一样得到崇拜的目光。可只怪在人群中多看了你一眼，让我从英雄变成了狗熊。</summary>
    
    
    
    
    <category term="分享" scheme="https://hanblog.xyz/tags/%E5%88%86%E4%BA%AB/"/>
    
    <category term="文章" scheme="https://hanblog.xyz/tags/%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>后来的后来，我也懂了</title>
    <link href="https://hanblog.xyz/posts/c0d29701.html"/>
    <id>https://hanblog.xyz/posts/c0d29701.html</id>
    <published>2019-04-07T08:28:47.000Z</published>
    <updated>2019-04-07T08:28:47.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>总觉得自己很聪明，什么事情也能看透三分，后来的后来，我也懂了。</p></blockquote><p>  《晚婚》这首歌，是我最近听到的，很好听，可惜当初我没发现，我发现有些好听的歌曲啊，都是曾经出版了，却无人问津，后来被带火的。</p><p>  宋冬野说，他刚弹那些东西出来的时候，不是民谣，只是个人爱好，却被人们称为民谣，他觉得他搞得这些东西，离民谣的水准还差好远好远，不过他喜欢自己搞一些东西，别人喜欢更好，不喜欢也会坚持自己的创作。</p><p>  我呢，之前很喜欢听一些有故事的歌，喜欢边听边翻看评论。我喜欢听那些歌曲，并不知道那叫民谣，偶然得知后，想听歌了，就去搜索“民谣”，失去了我听歌的本真。</p><p><img src="https://upload-images.jianshu.io/upload_images/14766542-9b4e857d1dd95149.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="img"></p><p>离开后我也按时吃饭，还会加餐</p><p>  以前分手的时候，那个人跟我讲：我当时的确心动了。我却抓住不放，认为他是迫不得已跟我分手。冷静了一段时间后，我想起我曾跟他讲的：真正的爱不是心动，而是心定。</p><p>  再比如，喜欢他的时候啊，觉得他哪里都好，长得好看，人还温柔。分开后的好长一段时间，我好多次从别人的嘴里，听见：他长得一般吧，没什么出众的。后来的后来，我发现，喜欢他不是因为他什么都好，而是因为喜欢他，才觉得他什么都好。</p><p><img src="https://upload-images.jianshu.io/upload_images/14766542-4665d9ebca0df9aa.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/720" alt="img"></p><p>我曾想和你一起去稻城</p><p>  现在的他，喜欢弹曲子，喜欢唱歌。可我知道，他不是唱给我听的，是给他喜欢的人，他未完成的遗憾。那个也喜欢阳光的女孩子，也喜欢弹吉他的女孩子，那个陪他一起长大的女孩子……</p><p>  我说既然你在自学吉他，以后可要弹一首《给东北姑娘的歌》给我听哦。以后，没机会了，还是留给自己吧，留给回忆。</p><p>  女孩子真的可以越来越优秀，越来越瘦，越来越美，我答应自己，丧完，就改变……</p><p><img src="https://upload-images.jianshu.io/upload_images/14766542-f7e287dc72eb49d2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000" alt="img"></p><p>我们总是在寻找</p><blockquote><p>爱你就像爱生命，多美的情话啊 。别多想了，那不是爱，只是喜欢，半途而废的喜欢。我对自己说，看来你还不够喜欢他。因为我不知道该怎么喜欢了，我把这归于自己懦弱。</p></blockquote><hr><p>作者：太阳的猴子</p><p>链接：<a href="https://www.jianshu.com/p/e8ea2af0154a">https://www.jianshu.com/p/e8ea2af0154a</a></p><p>来源：简书</p>]]></content>
    
    
    <summary type="html">爱你就像爱生命，多美的情话啊 。别多想了，那不是爱，只是喜欢，半途而废的喜欢。</summary>
    
    
    
    
    <category term="分享" scheme="https://hanblog.xyz/tags/%E5%88%86%E4%BA%AB/"/>
    
    <category term="文章" scheme="https://hanblog.xyz/tags/%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>不见长安</title>
    <link href="https://hanblog.xyz/posts/af87cbe1.html"/>
    <id>https://hanblog.xyz/posts/af87cbe1.html</id>
    <published>2019-04-07T07:03:06.000Z</published>
    <updated>2019-04-07T07:03:06.000Z</updated>
    
    <content type="html"><![CDATA[        <div id="aplayer-xNrGduMo" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-xNrGduMo"),            narrow: false,            autoplay: true,            showlrc: false,            music: {              title: "不见长安",              author: "半妖李莎",              url: "https://hblog-1258482129.cos.ap-shanghai.myqcloud.com/ReadArticle/%E4%B8%8D%E8%A7%81%E9%95%BF%E5%AE%89.mp3",              pic: "https://hblog-1258482129.cos.ap-shanghai.myqcloud.com/ReadArticle/%E4%B8%8D%E8%A7%81%E9%95%BF%E5%AE%89.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><h4 id="真正的离开不是歇斯底里，不是大哭大闹，而是在那个波澜不惊的日子里，穿上大衣，消失在冬日的阳光里，再也没有回来过。"><a href="#真正的离开不是歇斯底里，不是大哭大闹，而是在那个波澜不惊的日子里，穿上大衣，消失在冬日的阳光里，再也没有回来过。" class="headerlink" title="真正的离开不是歇斯底里，不是大哭大闹，而是在那个波澜不惊的日子里，穿上大衣，消失在冬日的阳光里，再也没有回来过。"></a>真正的离开不是歇斯底里，不是大哭大闹，而是在那个波澜不惊的日子里，穿上大衣，消失在冬日的阳光里，再也没有回来过。</h4><p>​                                        ——题记</p><center>I .</center><p>天有些暗，云有些沉，为本就黯然的心绪添了些哀愁。济南这座城市啊，好像也到了该挥手告别的时候了，六月离去之时所下定的某些决心，也没气力再支撑下去。</p><p>   拿着杯咖啡，默默坐在候机厅，有一搭没一搭的喝着，心思也不知飘到了哪里，这个世界将我隔绝在自己那片小小的空间里，连空气都在排斥着我的融入。还记着那个盛夏的六月，站在机场熙熙攘攘中的那两个小小的人儿，虽然看不清未来，却依旧那么坚定。</p><p>   那时的自己踌躇满志，未来虽然随着两地的隔绝而变得困难，但她的那句话一直是支持我面对艰险仍旧努力前行的白月光</p><p>   “我，我等着你啊，你可要说话算数。”</p><p>  世间万事当真是极难顺从人意，又是简单的一个信息，就让我从不畏风雨的参天大树变成了无根飘摇的荒外野草。</p><p>“我累了，不想坚持了……”</p><p>我似乎早有所悟，也未再言语些什么，惶惶然，不过半年而已。</p><blockquote><p> 果然，所有的山盟海誓都敌不过山高水长。</p></blockquote><p>​    我，说话算数了啊，是你，失约了。</p><blockquote><p>擦肩而过的两个人，似乎驶入了两条平行车道，背道而驰，渐行渐远。</p></blockquote><center>II .</center><p>我回到了自己的城市，努力的让自己走出来，让自己变得充实，更拼命的学习，在新的公司实习，锻炼，读书。忙碌，是忘却最好的辅助剂。好像独自一人也并非那么煎熬，好像孤身前行并非那么痛苦，可简单和家人的聚餐，妹妹无心的几句话，就让自己回到了原点。</p><p>“哥，上回吃日料是什么时候啊?”</p><p>“去年，是和她一起吃的。”</p><p>“哥，你娃娃机玩的怎么样啊？”</p><p>“不好，上回给她抓，一个都没抓到。”</p><p>“哥，漫咖啡的东西怎么样啊？”</p><p>“还不错，上回和她去的时候，热可可很棒。”</p><p>“哥，对不起……”</p><p>“没关系。”</p><p>我以为我很坚强，实则不堪一击；我以为我忘却了，看来，记性挺好…..</p><blockquote><p>如果回忆能够发出声响，那么，今夜的蜻蜓振翅和雨前惊雷都归你…..</p></blockquote><center>III .</center><p>我曾说过，希望你快乐，即使这份快乐，与我无关。所以啊，你在分手时请求我，别删掉联系方式，希望有空了，还能去朋友圈看看，我答应了。而我现在决定删掉你，你别惊讶，不是我言而无信，而是思考许久。即使过再长的时间，长到我们彼此再见面可以淡然相对，我却仍旧无法接受，有一天，又是那么一个随意的早晨，我打开朋友圈，看到了你被他人拥入怀中，我不知道自己会是怎样的感受，真不知道，但肯定不好受。所以，就让我懦弱一回，毕竟，这是最后一次了。</p><blockquote><p>你看，背向阳光而行的的人，也仍旧不会回来。</p></blockquote><hr><p>转自@<a href="https://www.douyu.com/66969">半妖丽莎</a></p>]]></content>
    
    
    <summary type="html">真正的离开不是歇斯底里，不是大哭大闹，而是在那个波澜不惊的日子里，穿上大衣，消失在冬日的阳光里，再也没有回来过。</summary>
    
    
    
    
    <category term="分享" scheme="https://hanblog.xyz/tags/%E5%88%86%E4%BA%AB/"/>
    
    <category term="文章" scheme="https://hanblog.xyz/tags/%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>IIS兼容和集成的区别</title>
    <link href="https://hanblog.xyz/posts/82ebdc59.html"/>
    <id>https://hanblog.xyz/posts/82ebdc59.html</id>
    <published>2019-02-25T04:28:16.000Z</published>
    <updated>2019-02-25T04:28:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天面试中遇到的一个问题，IIS兼容和集成的区别。特意查了一下</p><h3 id="百度百科"><a href="#百度百科" class="headerlink" title="百度百科"></a>百度百科</h3><p> 经典模式</p><p>指的是与<a href="https://www.baidu.com/s?wd=IIS&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">IIS</a> 6或者之前版本保持兼容的一种模式.</p><p>在<a href="https://www.baidu.com/s?wd=IIS&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">IIS</a> 6.0中的经典模式中，ASP.NET是一个添加到<a href="https://www.baidu.com/s?wd=IIS&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">IIS</a>中的ISAPI。IIS <a href="https://www.baidu.com/s?wd=7.0&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">7.0</a>之所以支持这种模式，是为了做到<a href="https://www.baidu.com/s?wd=%E5%90%91%E5%90%8E%E5%85%BC%E5%AE%B9&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">向后兼容</a>。但是，经典模式缺少许多集成模式才能提供的特性。在经典模式中，IIS拥有自身的管道，这些管道可以通过创建一个ISAPI扩展进行扩充，而ISAPI扩展是以难以开发而著称的。ASP.NET作为一个ISAPI扩展运行，只是IIS管道中的一项组成部分。</p><p>注意，在这种情况下，ASP.NET仅当IIS处理ISAPI扩展时才能够发挥作用。</p><p>集成模式：</p><p>这种全新的模式，允许我们将ASP.NET更好地与IIS集成，甚至允许我们在ASP.NET中编写一些功能（例如Module）来改变IIS的行为（扩展）。集成的好处是，不再通过ISAPI的方式，提高了速度和稳定性。至于扩展，则可以使得我们对于IIS以及其他类型的请求有更多的控制。</p><p>利用集成模式，可以将ASP.NET作为IIS的有机组成部分。现在，IIS服务器的功能被划分为40多个模块，因此也就将IIS和ASP.NET的功能划分为不同的组成部分。诸如StaticFileModule、BasicAuthenticationModule、FormsAuthentication、Session、Profile，以及RoleManager等模块都是IIS管道的组成部分。  </p><h3 id="CSDN"><a href="#CSDN" class="headerlink" title="CSDN"></a>CSDN</h3><p> <strong>在 IIS 7.0 中，应用程序池有两种运行模式：集成模式和经典模式。</strong></p><p> 应用程序池模式会影响<a href="https://www.baidu.com/s?wd=%E6%9C%8D%E5%8A%A1%E5%99%A8&tn=24004469_oem_dg&rsv_dl=gh_pl_sl_csd">服务器</a>处理托管代码请求的方式。</p><p> 如果托管应用程序在采用<strong>集成模式</strong>的应用程序池中运行，服务器将使用 IIS 和 ASP.NET 的集成请求处理管道来处理请求。</p><p> 如果托管应用程序在采用<strong>经典模式</strong>的应用程序池中运行，服务器会继续通过 Aspnet_isapi.dll 路由托管代码请求，其处理请求的方式就像应用程序在 IIS 6.0 中运行一样。</p><p> <strong>经典模式</strong></p><p> 指的是与IIS 6或者之前版本保持兼容的一种模式.</p><p> 在IIS 6.0中的经典模式中，ASP.NET是一个添加到IIS中的ISAPI。IIS  7.0之所以支持这种模式，是为了做到向后兼容。但是，经典模式缺少许多集成模式才能提供的特性。在经典模式中，IIS拥有自身的管道，这些管道可以通过创建一个ISAPI扩展进行扩充，而ISAPI扩展是以难以开发而著称的。ASP.NET作为一个ISAPI扩展运行，只是IIS管道中的一项组成部分。</p><p> <strong>注意，在这种情况下，ASP.NET仅当IIS处理ISAPI扩展时才能够发挥作用。</strong></p><p> 利用文件扩展名，可以判断使用哪个ISAPI处理程序。例如，可以将扩展名为<code>.aspx</code> 和<code>.ascx</code>的文件映射<code>到aspnet_isapi.dll</code>；并且将扩展名为<code>.asp</code>的文件映射到<code>asp.dll</code>，这样就可以处理传统的ASP页面；此外，将扩展名为<code>.php</code>的文件映射到<code>php.dll</code>，这样就可以处理PHP页面，前提是已经安装了<code>php.dll</code>。</p><p> 此外，在IIS 6.0和IIS 7.0的经典模式中，某些特性是重复的。例如，错误处理就是一种重复的特性，因为IIS可以处理非ASP.NET页面，而ASP.NET可以处理所有将处理程序映射为<code>aspnet_isapi.dll</code>的页面。</p><p> 在IIS 6.0中，我们可以将所有文件类型都映射到ASP.NET，但是这样做存在一些限制。最大的限制就是如何处理默认文档：一个默认文档仅当在<code>global.asax</code>中或者在一个HTTP模块中被指定为默认文档时，这个默认文档才能够得到处理。某些自定义的配置需要使用<code>aspnet_isapi.dll</code>处理所有的文件类型。IIS 7.0可以轻易地解决这个问题。</p><p> 经典模式可以在无须修改<code>web.config</code>的前提下运行现有的Web网站，因此，如果使用的Web farm中既包括IIS 6.0服务器，也包括IIS 7.0服务器，或者因为某些原因无法将<code>web.config</code><a href="https://www.baidu.com/s?wd=%E6%96%87%E4%BB%B6%E8%BD%AC%E6%8D%A2&tn=24004469_oem_dg&rsv_dl=gh_pl_sl_csd">文件转换</a>为遵循新语法的<code>web.config</code>文件，那么就可以使用经典模式。</p><p> <strong>集成模式：</strong></p><p> 这种全新的模式，允许我们将ASP.NET更好地与IIS集成，甚至允许我们在ASP.NET中编写一些功能（例如Module）来改变IIS的行为（扩展）。集成的好处是，不再通过ISAPI的方式，提高了速度和稳定性。至于扩展，则可以使得我们对于IIS以及其他类型的请求有更多的控制。</p><p> 利用集成模式，可以将ASP.NET作为IIS的有机组成部分。现在，IIS服务器的功能被划分为40多个模块，因此也就将IIS和ASP.NET的功能划分为不同的组成部分。诸如<code>StaticFileModule</code>、<code>BasicAuthenticationModule</code>、<code>FormsAuthentication</code>、<code>Session</code>、<code>Profile</code>，以及<code>RoleManager</code>等模块都是IIS管道的组成部分。</p><p> 注意，<code>FormsAuthentication</code>、<code>Session</code>、<code>Profile</code>，以及<code>RoleManager</code>原本就是ASP.NET的组成部分，与IIS并无关系。</p><p> IIS管道提供了二十多种事件，开发人员可以利用这些事件来扩展Web服务器的功能。实际上，通过创建定制模块，同时更新<code>applicationHost.config</code>，可以仅使用自定义模块，而无须再使用<a href="https://www.baidu.com/s?wd=%E5%BE%AE%E8%BD%AF%E5%85%AC%E5%8F%B8&tn=24004469_oem_dg&rsv_dl=gh_pl_sl_csd">微软公司</a>提供的内置模块，我们可以将IIS 7.0中的模块替换为自定义的模块。</p><h3 id="经典模式和集成模式之间配置的区别"><a href="#经典模式和集成模式之间配置的区别" class="headerlink" title="经典模式和集成模式之间配置的区别"></a>经典模式和集成模式之间配置的区别</h3><p> IIS 7.0对配置文件进行了一些修改，Web开发人员可以使用这些修改内容。例如，节就是这样一项修改，无论是经典模式还是集成模式都可以识别节，同时，节既可以在<code>applicationHost.config</code>文件中设置，也可以在<code>web.config</code>文件中设置。节既可以控制静态页面，也可以控制动态页面。即使在经典模式中，节也具有重要作用，它可以帮助Web开发人员在<code>web.config</code>文件中设置不同的IIS配置。</p><p> 在集成模式中，HTTP模块和HTTP处理程序不再定义于中，而是定义于中。如果在集成模式中运行一个包括了HTTP模块或HTTP处理程序的<code>web.config</code>文件，那么将会发生失效。幸运的是，微软公司已经详细规定了一个编号为500.22的错误信息，这个错误信息说明了如何一步步地迁移<code>web.config</code>文件。</p>]]></content>
    
    
    <summary type="html">面试中遇到的一个问题。</summary>
    
    
    
    
    <category term="分享" scheme="https://hanblog.xyz/tags/%E5%88%86%E4%BA%AB/"/>
    
    <category term="编程" scheme="https://hanblog.xyz/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
</feed>
